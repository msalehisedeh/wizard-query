{"version":3,"sources":["ng://wizard-query/src/app/wizard-query/wizard-query.service.ts","ng://wizard-query/src/app/wizard-query/wizard-query.component.ts","ng://wizard-query/src/app/wizard-query/wizard-query.directive.ts","ng://wizard-query/src/app/wizard-query/wizard-query.module.ts"],"names":["WizardQueryService","http","this","prototype","_normalize","value","deepXml","Array","result_1","map","item","push","_this","items","Object","keys","length","result_2","xml","xmldom.DOMParser","parseFromString","documentElement","_xml2json","e","_valueOfJsonPath","path","data","clause","result","x","subkey","node","t_1","sort","key","validated","r_1","v","r_2","split","str","indexOf","undefined","t_2","r_3","_get","url","SERVICE_PATH","dot","lastIndexOf","ext","toLowerCase","substr","headers","HttpHeaders","set","get","responseType","pipe","res","parsed","JSON","parse","e2","_stringValueOfKey","x_1","subitem","join","i","j","k","substring","_addToResult","operation","action","key2","op","complete","opk","_pack","list_1","_triggerResult","promise","next","_subquery","cachedFiles","BehaviorSubject","_queryIteration","in","queryItems","subscribe","source","opkeyi_1","error","logEnabled","console","log","cacheNamed","handle","handler","select","operationalKey_1","content","operationalKey","_makeArguments","list","b","vList","object_1","filter","replace","arglist","trim","key_1","order_1","array","_valueOf","p","a","Function","_prepareJsonPath","match","p1","p2","p3","offset","s","obj","attributes","c","attr","name","childNodes","nodeName","fragment","old","text","textContent","message","chainSelect","chainQuery","size","dataStore","arraySelect","groupedList","from","jpath","pathItem","y","Injectable","HttpClient","WizardQueryComponent","queryService","defineProperty","query","selectedDocumentName","success","executeQuery","Component","args","selector","template","Input","WizardQueryDirective","EventEmitter","info","onQueryResult","emit","Directive","Output","WizardQueryModule","NgModule","declarations","exports","imports","CommonModule","HttpClientModule","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["/*\n* Query service provides a way to query a remote JSON or XML file. It can be used in following ways.\n*\n* 1) With select() method, a single path or a list of paths can be given. each path will be a json qualifying\n* path to an end node (i.e., 'books.book.title'). If multiple paths are supplied, query result will be a json\n* object where each attribute will be a given query path and its value will be query result for that path.\n* For example:\n* select(['books.book.title', 'books.book.author'], '/example1.xml', false)\n* will result in {'books.book.title': [], 'books.book.author': []}.\n* Each result will not co-related with other result in order or in any other form. if a clause argument is\n* supplied, it will be invoked to further assist in filtering the query result. for example if certain category\n* of books are required, the clause function can look for a book category attribute and return the query result\n* if acceptable or undefined if result should be filtered out of the result.\n*\n* 2) With arraySelect() method, an array of {path: '', in:'', deepXml: true} can be supplied, each entry will be evaluated\n* as if select() method is invoked. But first, requests with similar paths will be merged into one call.  This\n* method is useful when paths are dynamicly given and it is not clear in advance if there are requests with\n* similar paths. deepXml attribute is optional.\n*\n* 3) With chainSelect() method, a chained set of {path: '', in: '', deepXml: true} is given in a json object. When result of\n* a query becomes available, the request json will be examined to see if a request for the key is available. If\n* so, then the 'in' for the path will be prepended to the resulting value of the previous query. , deepXml attribute is \n* optional. This method is useful when result of a query is a json or an xml file and additional query is needed \n* further down in the preceeding files. For example the assumption in the following call is that each books.book \n* result will be a file name and the file path for each result is '/samples/books/'.\n* chainSelect({\n*   path: 'books.book',\n*   in: 'sample1.xml',\n*   deepXml: true,\n*   'books.book': {\n*       in: '/samples/books/',\n*       path: ['publication.title', 'publication.author'],\n*       handler: this.bublicationHandler\n*   })\n* if a handler is supplied, it will be used to filter out any result that is not acceptable.\n*\n*/\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nimport {map} from 'rxjs/operators';\nimport {BehaviorSubject} from 'rxjs';\nimport * as xmldom from 'xmldom';\n\n/*\n* @param node The parent node. it can be used to evaluate based on other attributes in the node.\n* @param path attribute to be examined.\n* @param value the value of the path. it could be undefined, a literal, or a list.\n* @returns returns the value or filtered version of the value or undefined otherwise.\n*/\nexport type clauseEvaluator = (node: any, path: string, value: any) => any;\n\n@Injectable()\nexport class WizardQueryService {\n\n    public SERVICE_PATH = '';\n    public logEnabled = false;\n\n    constructor(\n      private http: HttpClient\n    ) {\n\n    }\n\n    /*\n    * Will normalize the given xml out of additional #text or #cdata-section nodes.\n    * @param value the xml to be normailzed.\n    * @param deepXml if cdata-section should be parsed.\n    * @return normalized xml.\n    */\n    private _normalize(value: any, deepXml: boolean) {\n        if (value instanceof Array) {\n            const result = [];\n            value.map( (item) => {\n                result.push(this._normalize(item, deepXml));\n            });\n            value = result;\n        } else if (typeof value === 'object') {\n            let items: any = Object.keys(value);\n\n            if (items.length === 1 && !(value[items[0]] instanceof Array)) {\n                if (value['#text']) {\n                    value = value['#text'];\n                } else if (value['#cdata-section']) {\n                    value = value['#cdata-section'];\n                    if (deepXml) {\n                        try {\n                            const xml = new xmldom.DOMParser().parseFromString(value);\n                            value = (xml.documentElement && xml.documentElement != null) ?\n                                        this._xml2json(xml.documentElement) :\n                                        value;\n                        }catch(e){\n                        }\n                    }\n                }\n            } else {\n                const result = {};\n                items.map( (item) => {\n                    result[item] = this._normalize(value[item], deepXml);\n                });\n                value = result;\n            }\n        }\n        return value;\n    }\n\n    /*\n    * @param path JSON path to evaluate. A path could be fully qualified for depth of json (i.e., 'a.b.c')\n    * @param data the data source.\n    * @param deepXml if cdata-section should be parsed.\n    * @param clause A method by which value(s) for the key(s) could be evaluated. the caller would evaluate the value for a given attribute.\n    * @returns returns evluated value for the key in data source.\n    */\n    private _valueOfJsonPath(\n        path: any,\n        data: any,\n        deepXml: boolean,\n        clause?: clauseEvaluator): any {\n\n        let result: any;\n        let x = this._normalize(data, deepXml);\n        path.map( (subkey: any) => {\n            let node = x;\n            if (node && node instanceof Array) {\n                const t = [];\n                if (subkey.sort) {\n                    node = subkey.sort(node);\n                }\n                node.map (\n                    (item) => {\n                        if (typeof item === 'object') {\n                            if (subkey.key.length) {\n                                x = subkey.key.length ? item[subkey.key] : item;\n                                if (x && subkey.validated) {\n                                    let r = true;\n                                    subkey.validated.map(v => {\n                                        if(v(x) == false) {\n                                            r = false;\n                                        }\n                                    });\n                                    if (r) {\n                                        t.push(x);\n                                    }\n                                }\n                            } else {\n                                if (subkey.validated) {\n                                    let r = true;\n                                    subkey.validated.map(v => {\n                                        if(v(item) == false) {\n                                            r = false;\n                                        }\n                                    });\n                                    if (r) {\n                                        t.push(item);\n                                    }\n                                } else {\n                                    t.push(item);\n                                }\n                            }\n                        } else if (subkey.key.length && (typeof item === 'string')) {\n                            item.split('.').map(\n                                (str) => {\n                                    if (str.indexOf(subkey.key) >= 0) {\n                                        t.push(str);\n                                    }\n                                }\n                            )\n                        }\n                    }\n                );\n                x = t;\n                result = x;\n            } else if (node && (typeof node === 'object')) {\n                x = x ?\n                    clause(node, subkey.key, subkey.key.length ? x[subkey.key]:  x) :\n                    undefined;\n                if (x && x instanceof Array) {\n                    const t = [];\n                    if (subkey.sort) {\n                        x = subkey.sort(x);\n                    }\n                    x.map(\n                        (item: any) => {\n                            if (subkey.validated) {\n                                let r = true;\n                                subkey.validated.map(v => {\n                                    if(v(item) == false) {\n                                        r = false;\n                                    }\n                                });\n                                if (r) {\n                                    t.push(item);\n                                }\n                            }\n                        }\n                    );\n                    x = t;\n                }\n                result = x;\n            } else if (node && (typeof node === 'string') && subkey.key.length) {\n                result = [];\n                node.split('.').map(\n                    (item) => {\n                        if (item.indexOf(subkey.key) >= 0) {\n                            result.push(item);\n                        }\n                    }\n                )\n            } else {\n                result = node;\n            }\n        });\n        return result;\n    }\n\n    private _get(path: string) {\n        const url = this.SERVICE_PATH + path;\n        const dot = path.lastIndexOf('.');\n        const ext = dot < 0 ? undefined : path.toLowerCase().substr(dot);\n        const headers = new HttpHeaders();\n        let result: any;\n\n        headers.set('Access-Control-Allow-Origin', '*');\n\n        if (ext === '.xml') {\n            headers.set('Content-Type', 'text; charset=utf-8').set('Accept', 'text');\n            result = this.http.get(url, { headers, responseType: 'text' })\n                .pipe(map((res) => {\n                    const xml = new xmldom.DOMParser().parseFromString(res);\n                    const json = this._xml2json(xml.documentElement);\n                    return json;\n                })\n            );\n        } else if (ext === '.txt') {\n            headers.set('Content-Type', 'text; charset=utf-8').set('Accept', 'text');\n            result = this.http.get(url, { headers, responseType: 'text' }).pipe(map((res) => res));\n        } else if (ext === '.json'){\n            headers.set('Content-Type', 'json; charset=utf-8').set('Accept', 'json');\n            result = this.http.get(url, {headers}).pipe(map((res) => res));\n        } else {\n            headers.set('Content-Type', 'text; charset=utf-8').set('Accept', 'text');\n            result = this.http.get(url, { headers, responseType: 'text' })\n                .pipe(map((res) => {\n                    let parsed: any;\n                    try {\n                        parsed = JSON.parse(res);\n                    }catch (e) {\n                        try {\n                            const xml = new xmldom.DOMParser().parseFromString(res);\n                            parsed = this._xml2json(xml.documentElement);\n                        } catch (e2) {\n                            parsed = res;\n                        }\n                    };\n                    return parsed ? parsed : res;\n                })\n            );\n        }\n        return result;\n    }\n\n    private _stringValueOfKey(key: any) {\n        const result = [];\n\n        if (key instanceof Array) {\n            key.map( \n                (item: any) => {\n                    if (item instanceof Array) {\n                        let x = [];\n                        item.map(\n                            (subitem) => {\n                                if (subitem.key.length) {\n                                    x.push(subitem.key);\n                                }\n                            }\n                        )\n                        result.push(x.join('.'));\n                    } else if (typeof item === 'string') {\n                        const i = item.indexOf('[');\n                        const j = item.indexOf(']');\n                        const k = item.length > (j + 1) ? 2 : 1;\n                        result.push(i > 0 ? item.substring(0,i) : j > 0 ? item.substring(j + k) : item);\n                    } else if (item.key.length) {\n                        result.push(item.key);\n                    }\n                }\n            )\n        } else {\n            result.push(key.key)\n        }\n        return result.join(',');\n    }\n\n    private _addToResult(value: any, key: string, operation: any, action: any) {\n        const path = this._stringValueOfKey(action.path);\n        const key2 = this._stringValueOfKey(key);\n        let op = operation.result[path];\n        let complete = false;\n    \n        if (!op) {\n            operation.result[path] = {};\n        }\n        if (op) {\n            let opk = op[key2];\n            if (operation['temp'] &&\n                operation['temp'][key2]) {\n                op[key2] = [op[key2]];\n                delete operation['temp'];\n            }else if (opk && (opk instanceof Array) === false) {\n                opk = [opk];\n                op[key2] = opk;\n            }\n            if (op[key2]) {\n                op[key2].push(this._normalize(value, action.deepXml) );\n            } else {\n                op.push(this._normalize(value, action.deepXml) );\n            }\n        } else {\n            if (value instanceof Array) {\n                // if already an array remember it.\n                if (!operation['temp']) {\n                    operation['temp'] = {};\n                }\n                if (!operation['temp'][key2]) {\n                    operation['temp'][key2] = true;\n                }\n            }\n            operation.result[path][key2] = this._normalize(value, action.deepXml);\n            complete = true;\n        }\n        return complete;\n    }\n\n    private _pack(result: any) {\n        if (result instanceof Array) {\n            const list = [];\n            result.map(\n                (item) => {\n                    list.push(this._pack(item));\n                }\n            );\n            result = list;\n        } else if (typeof result === 'object') {\n            const keys = Object.keys(result);\n            keys.map (\n                (key) => {\n                    const item = result[key];\n                    if (item instanceof Array) {\n\n                    } else if (item[key]) {\n                        result[key] = item[key];\n                    }\n                }\n            )\n        }\n        return result;\n    }\n\n    private _triggerResult(promise: any, result: any) {\n        promise.next(this._pack(result));\n    }\n\n    private _subquery(\n        promise: any,\n        path: any,\n        operation: any,\n        action: any) {\n\n        if (operation.cachedFiles[path] === undefined) {\n            // one of the keys at this level could be referencing the same file which\n            // is not yet fetched. need to wait till it is available.\n            operation.cachedFiles[path] = new BehaviorSubject<any>(null);\n            this._queryIteration(\n                operation.cachedFiles[path],\n                operation,\n                {\n                    path: action.path,\n                    in: action.in,\n                    deepXml: action.deepXml,\n                    join: action.join,\n                    queryItems: (action.path instanceof Array) ? action.path.length : 1\n                },\n                path\n            );\n        }\n\n        // wait for result raised above.\n        operation.cachedFiles[path].subscribe(\n            (source: any) => {\n                if (source) {\n                    const opkeyi = action.join ? action.join[action.path] : undefined;\n                    if (opkeyi) {\n                        if (source instanceof Array) {\n                            source.map(\n                                (item) => {\n                                    this._subquery(\n                                        promise,\n                                        item,\n                                        operation,\n                                        {\n                                            path: opkeyi.path,\n                                            in: opkeyi.in + item,\n                                            deepXml: opkeyi.deepXml,\n                                            join: opkeyi.join,\n                                            queryItems: (opkeyi.path instanceof Array) ? opkeyi.path.length : 1\n                                        }\n                                    );\n                                }\n                            )\n                        } else {\n                            this._subquery(\n                                promise,\n                                source,\n                                operation,\n                                {\n                                    path: action.join[opkeyi.path],\n                                    in: opkeyi.in + source,\n                                    deepXml: action.deepXml,\n                                    join: opkeyi.join,\n                                    queryItems: (opkeyi.path instanceof Array) ? opkeyi.path.length : 1\n                                }\n                            );\n                        }\n                    } else if (this._addToResult(source, action.path, operation, action)) {\n                        action.queryItems--;\n                        if (action.queryItems === 0) {\n                            this._triggerResult(promise, operation.result);\n                        }\n                    }else {\n                        action.queryItems--;\n                        this._triggerResult(promise, operation.result);\n                    }\n                }\n            },\n            (error: any) => {\n                if (this.logEnabled) {\n                    console.log(error);\n                }\n                action.queryItems--;\n                this._triggerResult(promise, operation.result);\n           }\n        );\n    }\n    /*\n    * Iterates through a chain query.\n    * @param promise The promise which original caller is waiting for.\n    * @param operation data for keeping track of the iteration.\n    * @param action contains: {path: current keys to query for, in: current query path, handler: resolver method}.\n    * @param cacheNamed The cached name from previous iteration if any.\n    * @returns returns none.\n    */\n    private _queryIteration(\n        promise: BehaviorSubject<any>,\n        operation: any,\n        action: any,\n        cacheNamed?: string) {\n\n        if (!action.handle) {\n            action.handler = (node: any, path: string, value: any) => value;\n        }\n        this.select(action.path, action.in, action.deepXml, action.handler).subscribe(\n            (data) => {\n                if (data) {\n                    if (cacheNamed) {\n                        // result of n-th level call to be placed on previous level cache reference.\n                        operation.cachedFiles[cacheNamed].next(data);\n                    } else {\n                        if (data instanceof Array) {\n                            const operationalKey = action.join ? action.join[action.path] : undefined;\n                            if (operationalKey) {\n                                // assumption is the resulting list is a list of file paths.\n                                data.map( (content) => {\n                                    const path = content['#text'] ? content['#text'] : content;\n                                    this._subquery(promise, path, operation, {\n                                        path: operationalKey.path,\n                                        in: operationalKey.in + content,\n                                        deepXml: operationalKey.deepXml,\n                                        join: operationalKey.join,\n                                        queryItems: (operationalKey.path instanceof Array) ? operationalKey.path.length : 1\n                                    });\n                                });\n                            } else {\n                                // no more query in the chain.\n                                action.queryItems--;\n                                if (action.queryItems === 0) {\n                                    const result =operation.result ? operation.result : {};\n                                    this._triggerResult(promise, Object.keys(operation.result).length ? operation.result : data);\n                                }\n                            }\n                        } else if (typeof data === 'object') {\n                            Object.keys(data).map( (key) => {\n                                const content = data[key];\n                                const operationalKey = action.join ? action.join[key]: undefined;\n    \n                                if (content && content.length && operationalKey) {\n                                    this._subquery(\n                                        promise,\n                                        content,\n                                        operation,\n                                        {\n                                            path: operationalKey.path,\n                                            in: operationalKey.in + content,\n                                            deepXml: operationalKey.deepXml,\n                                            queryItems: (operationalKey.path instanceof Array) ? operationalKey.path.length : 1\n                                        }\n                                    );\n                                } else {\n                                    action.queryItems--;\n                                    if (content) {\n                                        if (!operation.result) {\n                                            operation.result = {};\n                                        }\n                                        if (operation.result instanceof Array) {\n                                            operation.result.push(content);\n                                        } else {\n                                            operation.result[key] = content;\n                                        }\n                                    }\n                                    if (action.queryItems === 0) {\n                                        this._triggerResult(promise, Object.keys(operation.result).length ? operation.result : data);\n                                    }\n                                }\n                            });\n                        } else {\n                            action.queryItems--;\n                            if (action.queryItems === 0) {\n                                if (Object.keys(operation.result).length === 0 && data !== undefined) {\n                                    operation.result = data;\n                                }\n                            }\n                            this._triggerResult(promise, operation.result);\n                        }\n                    }\n                }\n            },\n            (error: any) => {\n                promise.error('failed to query ' + action.path);\n                action.queryItems--;\n                if (action.queryItems === 0) {\n                    this._triggerResult(promise, operation.result);\n                }\n            }\n        );\n    }\n\n    private _makeArguments(key: string) {\n        const list = key.split('.');\n        const result = [];\n        list.map( (item) => {\n            const b = item.indexOf('[');\n            if (b < 0) {\n                result.push({\n                    key: item,\n                    validated: [(data) => true]\n                });\n            } else {\n                let str = item.substring(b + 1, item.length - 1);\n                const vList = str.split('][');\n                const object = {\n                    key: item.substring(0,b),\n                    validated: [(data) => true]\n                };\n                vList.map( \n                    (filter) => {\n                        filter = filter.replace(/\\`/g, '.');\n                        filter = filter.replace(/\\@/g, 'data');\n                        if (filter.indexOf('order-by:') > -1) {\n                            const arg: any = filter.substring(filter.indexOf('order-by:') + 10).trim();\n                            const arglist = arg.split('~');\n                            const key = arglist[0].trim();\n                            const order= arglist[1] ? arglist[1].trim().toLowerCase(): 'asc';\n                            object['sort'] = function (array: any) {\n                                const _valueOf = (key: string, p: any) => {\n                                    key.split('.').map( (x) => {p = p[x]});\n                                    return p;\n                                }\n                                return array.sort(\n                                    function(a: any,b: any){\n                                        const flag =_valueOf(key, a) > _valueOf(key, b);\n                                        return flag ? (order === 'asc' ? 1: -1) : (order === 'asc' ? -1: 1);\n                                    }\n                                );\n                            }\n                        }else {\n                            filter = 'return function (data) { var x = false; try{ x = (' + filter + '); }catch(e){} return x;}';\n                            object['validated'].push( new Function(filter)() );\n                        }\n                    }\n                );\n                result.push(object);\n            }\n        });\n        return result;\n    }\n\n    private _prepareJsonPath(path: any) {\n        let result: any;\n        if (path instanceof Array) {\n            result = [];\n            path.map(\n                (i) => {\n                    const x = i.replace(/([\\[(])(.+?)([\\])])/g, (match, p1, p2, p3, offset, s) => {\n                        return p1 + p2.replace(/\\./g,'`') + p3;\n                    });\n                    result.push(this._makeArguments(x));\n                }\n            );\n        } else {\n            path = path ? path : '';\n            const x = path.replace(/([\\[(])(.+?)([\\])])/g, (match, p1, p2, p3, offset, s) => {\n                return p1 + p2.replace(/\\./g,'`') + p3;\n            });\n            result = this._makeArguments(x);\n        }\n        return result;\n    }\n    \n\n    /*\n    * Will convert the xml into a json.\n    * @param xml XML to be converted.\n    * @returns returns converted JSON.\n    */\n    private _xml2json(xml: any) {\n        try {\n            let obj = {};\n            if (xml.attributes) {\n                const c = xml.attributes;\n                for (let i = 0; i < c.length; i++) {\n                const attr = c[i];\n                obj[attr.name] = attr.value;\n                }\n            }\n            if (xml.childNodes && xml.childNodes.length) {\n            for (let i = 0; i < xml.childNodes.length; i++) {\n                const item = xml.childNodes[i];\n                const nodeName = item.nodeName;\n\n                if (obj[nodeName] === undefined) {\n                    const fragment = this._xml2json(item);\n                    if (fragment) {\n                    obj[nodeName] = fragment;\n                    }\n                } else {\n                if (obj[nodeName].push === undefined) {\n                    const old = obj[nodeName];\n\n                    obj[nodeName] = [];\n                    obj[nodeName].push(old);\n                }\n                const fragment = this._xml2json(item);\n                if (fragment) {\n                    obj[nodeName].push(fragment);\n                }\n                }\n            }\n            } else {\n            const text = xml.textContent.trim().replace(/(?:\\r\\n|\\r|\\n|\\t)/g, '');\n            obj = text.length ? text : undefined;\n            }\n            return obj;\n        } catch (e) {\n            if (this.logEnabled) {\n                console.log(e.message);\n            }\n        }\n    }\n\n    /*\n    * Will do a chain query on specified paths from remote location.\n    * @param chainQuery A Json structure with paths. Each path will contain a chain of instructions.\n    * Each instruction will have a 'in' to a file and a path to search on it (see. select()). once the\n    * result is in, the next instruction in the path chain will be trigged. After the path through all\n    * chained paths is completed, resulting value will be put in a json where its path is the original\n    * json path and its value will be the resulting value.\n    *\n    * this is not fully tested. caller should pass something like\n    * {path: [path1,path2], in: 'something or blank', deepXml: true, join: {k1: {path: path3, in: 'something or plank', clause: function}}}\n    * if path1 or path2 or path3 are found at the root object, a chain reaction to fetch deep will follow. An\n    * optional clause will help resolve complex situations.\n    *\n    * @returns returns an observable. the caller should subscribe to this in order to receive the result.\n    */\n    chainSelect(chainQuery: any): BehaviorSubject<any> {\n        const size = (chainQuery.path instanceof Array) ?  chainQuery.path.length : 1;\n        const operation = {cachedFiles: {}, result: {}};\n        const dataStore = new BehaviorSubject<any>(null);\n\n        this._queryIteration(\n            dataStore,\n            operation,\n            {\n                path: chainQuery.path,\n                in: chainQuery.in,\n                deepXml: chainQuery.deepXml,\n                join: chainQuery.join,\n                queryItems: size\n            }\n        );\n        return dataStore;\n    }\n\n    /*\n    * Will group file paths if they are similar to avoid multiple calls.\n    * @param list A list of Json {paths, in, deepXml} structures. deepXml is optional.\n    * @param clause A method by which value(s) for the path(s) could be evaluated. the caller would evaluate the value for a given attribute.\n    * @returns returns an observable. the caller should subscribe to this in order to receive the result.\n    */\n    arraySelect(\n        list: any,\n        clause?: clauseEvaluator): BehaviorSubject<any>  {\n        const groupedList = {};\n        list.map( (item: any) => {\n            if (groupedList[item.in] === undefined) {\n                groupedList[item.in] = [];\n            }\n            groupedList[item.in].push({path: item.path, deepXml: item.deepXml});\n        });\n        const dataStore = new BehaviorSubject<any>(null);\n\n        Object.keys(groupedList).map ( (url) => {\n            this.select(groupedList[url].path, url, groupedList[url].deepXml, clause).subscribe(\n                (data: any) => {\n                    if (data) {\n                        dataStore.next(data);\n                    }\n                },\n                (error: any) => {\n                    dataStore.error(error);\n                }\n            );\n        });\n        return dataStore;\n    }\n\n    /*\n    * Will query path from a remote location qualified through an optional clause function that\n    * evaluates, filters, or sorts the resul of the query.\n    * @param path A a single JSON path or list of paths to select (i.e., 'a.b.c')\n    * @param from A reference URL to a remote source.\n    * @param deepXml if cdata-section should be parsed.\n    * @param clause A method by which value(s) for the path(s) could be evaluated. the caller would evaluate the value for a given attribute.\n    * @returns returns an observable. the caller should subscribe to this in order to receive the result.\n    */\n    select(\n        path: any,\n        from: string,\n        deepXml: boolean,\n        clause?: clauseEvaluator): BehaviorSubject<any> {\n\n        const dataStore = new BehaviorSubject<any>(null);\n\n        this._get(from).subscribe(\n            (data: any) => {\n                let result: any;\n                const jpath = this._prepareJsonPath(path);\n\n                if (!clause) {\n                    clause = (node: any, path: string, value: any) => value;\n                }\n                if (path instanceof Array) {\n                    result = {};\n                    jpath.map((pathItem) => {\n                        const y = this._valueOfJsonPath(pathItem, data, deepXml, clause);\n                        if (y) {\n                            let key = this._stringValueOfKey(pathItem);\n                            result[key] = y;\n                        }\n                    });\n                    if (Object.keys(result).length === 0) {\n                        result = undefined;\n                    }\n                } else if (typeof path === 'string') {\n                    result = this._valueOfJsonPath(jpath, data, deepXml, clause);\n                }\n                if (result) {\n                    dataStore.next(result);\n\n                } else {\n                    dataStore.error('Result not found for ' + path);\n                }\n            },\n            (error: any) => {\n                dataStore.error(error);\n            }\n        );\n        return dataStore;\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { WizardQueryService } from './wizard-query.service';\n\n@Component({\n  selector: 'wizard-query',\n  templateUrl: './wizard-query.html',\n  styleUrls: ['./wizard-query.scss']\n})\nexport class WizardQueryComponent {\n  selectedDocumentName: string;\n\n  data: any;\n  source: any;\n  query: any;\n  \n  @Input()\n  set queryInfo(data: any) {\n    this.query = data;\n    if (this.query) {\n      this.selectedDocumentName = this.query.in.substring(this.query.in.lastIndexOf('/'));\n      this.queryService.chainSelect({\n        in: this.query.in,\n        path: ''\n      }).subscribe(\n        (success) => {\n          if(success) {\n            this.source = success;\n            this.data = undefined;\n          }\n        },\n        (error) => {\n          this.source = error;\n          this.data = undefined;\n        }\n      );\n    } else {\n      this.data = undefined;\n      this.source = undefined;\n    }\n  }\n\n  constructor(private queryService: WizardQueryService) {\n  }\n\n  executeQuery(text: any) {\n    const content = JSON.parse(text.value);\n    this.queryService.chainSelect(content).subscribe(\n      (success) => {\n        if(success) {\n          this.data = success;\n        }\n      },\n      (error) => {\n        this.data = error;\n      }\n    );\n  }\n}\n","import {\r\n    Directive,\r\n    Input,\r\n    Output,\r\n    EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { WizardQueryService } from './wizard-query.service';\r\n\r\n@Directive({\r\n    selector: '[wizardQuery]'\r\n})\r\nexport class WizardQueryDirective {\r\n    query: any;\r\n\r\n            \r\n    @Output()\r\n    onQueryResult: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output()\r\n    onQueryError: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input()\r\n    set wizardQuery(info: any) {\r\n        this.query = info;\r\n        if (this.query) {\r\n            this.queryService.chainSelect(this.query).subscribe(\r\n                (success) => {\r\n                    if(success) {\r\n                        this.onQueryResult.emit(success);\r\n                    }\r\n                },\r\n                (error) => {\r\n                    this.onQueryResult.emit(error);\r\n                }\r\n            );\r\n        } else {\r\n            this.onQueryResult.emit(undefined);\r\n        }\r\n    }\r\n\r\n    constructor(private queryService: WizardQueryService) {}\r\n\r\n}","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { WizardQueryComponent } from './wizard-query.component';\nimport { WizardQueryService } from './wizard-query.service';\nimport { WizardQueryDirective } from './wizard-query.directive';\n\n\n@NgModule({\n  declarations: [\n    WizardQueryComponent,\n    WizardQueryDirective\n  ],\n  exports: [\n    WizardQueryComponent,\n    WizardQueryDirective\n  ],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [\n    WizardQueryService\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class WizardQueryModule { }\n"]}