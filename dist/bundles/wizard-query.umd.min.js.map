{"version":3,"sources":["ng://wizard-query/src/app/wizard-query/wizard-query.service.ts","ng://wizard-query/src/app/wizard-query/wizard-query.component.ts","ng://wizard-query/src/app/wizard-query/wizard-query.directive.ts","ng://wizard-query/src/app/wizard-query/wizard-query.module.ts"],"names":["WizardQueryService","http","this","prototype","_globalFunctions","_normalize","value","deepXml","Array","result_1","map","item","push","_this","items","Object","keys","length","result_2","xml","xmldom.DOMParser","parseFromString","documentElement","_xml2json","e","_valueOfJsonPath","path","data","as","clause","result","x","subkey","node","t_1","sort","key","validated","r_1","v","z","undefined","r_2","split","str","indexOf","t_2","r_3","r_4","_get","url","SERVICE_PATH","dot","lastIndexOf","ext","toLowerCase","substr","headers","HttpHeaders","set","get","responseType","pipe","res","parsed","JSON","parse","e2","_stringValueOfKey","x_1","subitem","join","i","j","k","substring","replace","_addToResult","operation","action","key2","op","complete","opk","stringify","_pack","list_1","_triggerResult","promise","saveAs","next","_subquery","cachedFiles","BehaviorSubject","_queryIteration","in","handler","queryItems","subscribe","source","opkeyi_1","error","logEnabled","console","log","cacheNamed","_select","operationalKey_1","content","size","operationalKey","message","reason","_makeArguments","list","b","vList","object_1","filter","arglist","trim","key_1","order_1","array","_valueOf","p","a","t","f","Function","_handleSpecialCharacters","bindex","_prepareJsonPath","from","dataStore","jpath","pathItem","y","obj","attributes","c","attr","name","childNodes","nodeName","fragment","old","text","textContent","chainSelect","chainQuery","arraySelect","groupedList","select","Injectable","HttpClient","WizardQueryComponent","queryService","defineProperty","query","selectedDocumentName","success","parseFunctions","executeQuery","alert","err","Component","args","selector","template","Input","WizardQueryDirective","EventEmitter","info","onQueryResult","emit","Directive","Output","WizardQueryModule","NgModule","declarations","exports","imports","CommonModule","HttpClientModule","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["/*\n* Query service provides a way to query a remote JSON or XML file. It can be used in following ways.\n*\n* 1) With select() method, a single path or a list of paths can be given. each path will be a json qualifying\n* path to an end node (i.e., 'books.book.title'). If multiple paths are supplied, query result will be a json\n* object where each attribute will be a given query path and its value will be query result for that path.\n* For example:\n* select(['books.book.title', 'books.book.author'], '/example1.xml', false)\n* will result in {'books.book.title': [], 'books.book.author': []}.\n* Each result will not co-related with other result in order or in any other form. if a clause argument is\n* supplied, it will be invoked to further assist in filtering the query result. for example if certain category\n* of books are required, the clause function can look for a book category attribute and return the query result\n* if acceptable or undefined if result should be filtered out of the result.\n*\n* 2) With arraySelect() method, an array of {path: '', in:'', deepXml: true} can be supplied, each entry will be evaluated\n* as if select() method is invoked. But first, requests with similar paths will be merged into one call.  This\n* method is useful when paths are dynamicly given and it is not clear in advance if there are requests with\n* similar paths. deepXml attribute is optional.\n*\n* 3) With chainSelect() method, a chained set of {path: '', in: '', deepXml: true} is given in a json object. When result of\n* a query becomes available, the request json will be examined to see if a request for the key is available. If\n* so, then the 'in' for the path will be prepended to the resulting value of the previous query. , deepXml attribute is \n* optional. This method is useful when result of a query is a json or an xml file and additional query is needed \n* further down in the preceeding files. For example the assumption in the following call is that each books.book \n* result will be a file name and the file path for each result is '/samples/books/'.\n* chainSelect({\n*   path: 'books.book',\n*   in: 'sample1.xml',\n*   deepXml: true,\n*   'books.book': {\n*       in: '/samples/books/',\n*       path: ['publication.title', 'publication.author'],\n*       handler: this.bublicationHandler\n*   })\n* if a handler is supplied, it will be used to filter out any result that is not acceptable.\n*\n*/\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nimport {map} from 'rxjs/operators';\nimport {BehaviorSubject} from 'rxjs';\nimport * as xmldom from 'xmldom';\n\n/*\n* @param node The parent node. it can be used to evaluate based on other attributes in the node.\n* @param path attribute to be examined.\n* @param value the value of the path. it could be undefined, a literal, or a list.\n* @returns returns the value or filtered version of the value or undefined otherwise.\n*/\nexport type clauseEvaluator = (node: any, path: string, value: any) => any;\n\n@Injectable()\nexport class WizardQueryService {\n\n    public SERVICE_PATH = '';\n    public logEnabled = false;\n\n    constructor(\n      private http: HttpClient\n    ) {\n\n    }\n\n    private _globalFunctions() {\n        return `\n        function reverse(a) {\n            var result = a;\n            if (a instanceof Array) {\n                result = a.reverse();\n            } else if (typeof a === 'string') {\n                result = a.split('').reverse().join('');\n            }\n            return result;\n        }\n        function sum(a,b) {\n            var total = 0;\n            if (a instanceof Array) { \n                a.map(function(k) {\n                    total += sum(k, b);\n                });\n            } else if (typeof a === 'object') {\n                if (b.indexOf('.')>0) {\n                    var t = a;\n                    b.split('.').map(function(k){\n                        total+=sum( t[k], b.substring(k.length+1) );\n                    });\n                } else if(a[b]) {\n                    var t = a[b];\n                    total += (typeof t === 'number') ? t : parseFloat(t);\n                } \n            } else if (typeof a === 'number') {\n                total = a;\n            } \n            return total;\n        }\n        function count(a,b) {\n            var total = 0;\n            if (a instanceof Array) { \n                a.map(function(k) {\n                    total += count(k, b);\n                });\n            } else if (typeof a === 'object') {\n                Object.keys(a).map(function(k){\n                    total += count(a[k],b);\n                });\n            } else if (typeof a === 'string') {\n                total = a.split(b).length - 1;\n            } else if (a === b) {\n                total++;\n            }\n            return total;\n        }\n        function like(a, b) {\n            var result = undefined;\n            if (a instanceof Array) {\n                result = [];\n                a.map(function(k) {\n                    result.push(like(k, b));\n                });\n            } else if (typeof a === 'object') {\n                result = [];\n                Object.keys(a).map(function(k){\n                    result.push(like(a[k], b));\n                });\n            } else if (typeof a === 'string') {\n                if (a.indexOf(b) > -1) {\n                    result = a;\n                }\n            } else if (a === b) {\n                result = a;\n            }\n            return result;\n        }\n        function as(a, b) {\n            if (asList[b] === undefined) {\n                asList[b] = [a];\n            } else {\n                asList[b].push(a);\n            }\n            return a;\n        }\n        function is_in(a, b, list) {\n            var result = undefined;\n            if (b instanceof Array) { \n                result = [];\n                b.map(function(k) {\n                    result.push(is_in(k, list));\n                });\n            } else if (typeof b === 'object') {\n                result = [];\n                Object.keys(b).map(function(k) {\n                    result.push(is_in(b[k], list));\n                });\n            } else if (asList[list]){\n                asList[list].map(function(t) {\n                    if (typeof t ==='string') {\n                        if (t.indexOf(b) > -1) {\n                            result = a;\n                        }\n                    }\n                });\n            }\n            return result;\n        }\n        `;\n    }\n\n    /*\n    * Will normalize the given xml out of additional #text or #cdata-section nodes.\n    * @param value the xml to be normailzed.\n    * @param deepXml if cdata-section should be parsed.\n    * @return normalized xml.\n    */\n    private _normalize(value: any, deepXml: boolean) {\n        if (value instanceof Array) {\n            const result = [];\n            value.map( (item) => {\n                result.push(this._normalize(item, deepXml));\n            });\n            value = result;\n        } else if (typeof value === 'object') {\n            let items: any = Object.keys(value);\n\n            if (items.length === 1 && !(value[items[0]] instanceof Array)) {\n                if (value['#text']) {\n                    value = value['#text'];\n                } else if (value['#cdata-section']) {\n                    value = value['#cdata-section'];\n                    if (deepXml) {\n                        try {\n                            const xml = new xmldom.DOMParser().parseFromString(value);\n                            value = (xml.documentElement && xml.documentElement != null) ?\n                                        this._xml2json(xml.documentElement) :\n                                        value;\n                        }catch(e){\n                        }\n                    }\n                }\n            } else {\n                const result = {};\n                items.map( (item) => {\n                    result[item] = this._normalize(value[item], deepXml);\n                });\n                value = result;\n            }\n        }\n        return value;\n    }\n\n    /*\n    * @param path JSON path to evaluate. A path could be fully qualified for depth of json (i.e., 'a.b.c')\n    * @param data the data source.\n    * @param deepXml if cdata-section should be parsed.\n    * @param clause A method by which value(s) for the key(s) could be evaluated. the caller would evaluate the value for a given attribute.\n    * @returns returns evluated value for the key in data source.\n    */\n    private _valueOfJsonPath(\n        path: any,\n        data: any,\n        as: any,\n        deepXml: boolean,\n        clause?: clauseEvaluator): any {\n\n        let result: any;\n        let x = this._normalize(data, deepXml);\n        path.map( (subkey: any) => {\n            let node = x;\n            if (node && node instanceof Array) {\n                const t = [];\n                if (subkey.sort) {\n                    node = subkey.sort(node);\n                }\n                node.map (\n                    (item) => {\n                        if (typeof item === 'object') {\n                            if (subkey.key.length) {\n                                x = subkey.key.length ? item[subkey.key] : item;\n                                if (x && subkey.validated) {\n                                    let r = true;\n                                    subkey.validated.map(v => {\n                                        const z = v(x, as);\n                                        if (typeof z === 'boolean') {\n                                            if(z  == false) {\n                                                r = false;\n                                            }\n                                        } else {\n                                            x = z;\n                                        }\n                                    });\n                                    if (r && x) {\n                                        t.push(x);\n                                    } else {\n                                        x = undefined;\n                                    }\n                                }\n                            } else {\n                                if (subkey.validated) {\n                                    let r = true;\n                                    subkey.validated.map(v => {\n                                        const z = v(item, as);\n                                        if (typeof z === 'boolean') {\n                                            if(z  == false) {\n                                                r = false;\n                                            }\n                                        } else {\n                                            item = z;\n                                        }\n                                    });\n                                    if (r && item) {\n                                        t.push(item);\n                                    } else {\n                                        x = undefined;\n                                    }\n                                } else {\n                                    t.push(item);\n                                }\n                            }\n                        } else if (subkey.key.length && (typeof item === 'string')) {\n                            item.split('.').map(\n                                (str) => {\n                                    if (str.indexOf(subkey.key) >= 0) {\n                                        t.push(str);\n                                    }\n                                }\n                            )\n                        }\n                    }\n                );\n                x = t;\n                result = x;\n            } else if (node && (typeof node === 'object')) {\n                x = x ?\n                    clause(node, subkey.key, subkey.key.length ? x[subkey.key]:  x) :\n                    undefined;\n                if (x && x instanceof Array) {\n                    const t = [];\n                    if (subkey.sort) {\n                        x = subkey.sort(x);\n                    }\n                    x.map(\n                        (item: any) => {\n                            if (subkey.validated) {\n                                let r = true;\n                                subkey.validated.map(v => {\n                                    const z = v(item, as);\n                                    if (typeof z === 'boolean') {\n                                        if(z  == false) {\n                                            r = false;\n                                        }\n                                    } else {\n                                        item = z;\n                                    }\n                                });\n                                if (r && item) {\n                                    t.push(item);\n                                } else {\n                                    x = undefined;\n                                }\n                            }\n                        }\n                    );\n                    x = t;\n                    result = x;\n                } else if (x) {\n                    if (subkey.validated) {\n                        let r = true;\n                        subkey.validated.map(v => {\n                            const z = v(x, as);\n                            if (typeof z === 'boolean') {\n                                if(z  == false) {\n                                    r = false;\n                                }\n                            } else {\n                                x = z;\n                            }\n                        });\n                        if (r && x) {\n                            result = x;\n                        } else {\n                            x = undefined;\n                        }\n                    } else {\n                        result = x;\n                    }\n                }\n            } else if (node && (typeof node === 'string') && subkey.key.length) {\n                result = [];\n                node.split('.').map(\n                    (item) => {\n                        if (item.indexOf(subkey.key) >= 0) {\n                            result.push(item);\n                        }\n                    }\n                )\n            } else {\n                result = node;\n            }\n        });\n        return result;\n    }\n\n    private _get(path: string) {\n        const url = this.SERVICE_PATH + path;\n        const dot = path.lastIndexOf('.');\n        const ext = dot < 0 ? undefined : path.toLowerCase().substr(dot);\n        const headers = new HttpHeaders();\n        let result: any;\n\n        headers.set('Access-Control-Allow-Origin', '*');\n\n        if (ext === '.xml') {\n            headers.set('Content-Type', 'text; charset=utf-8').set('Accept', 'text');\n            result = this.http.get(url, { headers, responseType: 'text' })\n                .pipe(map((res) => {\n                    const xml = new xmldom.DOMParser().parseFromString(res);\n                    const json = this._xml2json(xml.documentElement);\n                    return json;\n                })\n            );\n        } else if (ext === '.txt') {\n            headers.set('Content-Type', 'text; charset=utf-8').set('Accept', 'text');\n            result = this.http.get(url, { headers, responseType: 'text' }).pipe(map((res) => res));\n        } else if (ext === '.json'){\n            headers.set('Content-Type', 'json; charset=utf-8').set('Accept', 'json');\n            result = this.http.get(url, {headers}).pipe(map((res) => res));\n        } else {\n            headers.set('Content-Type', 'text; charset=utf-8').set('Accept', 'text');\n            result = this.http.get(url, { headers, responseType: 'text' })\n                .pipe(map((res) => {\n                    let parsed: any;\n                    try {\n                        parsed = JSON.parse(res);\n                    }catch (e) {\n                        try {\n                            const xml = new xmldom.DOMParser().parseFromString(res);\n                            parsed = this._xml2json(xml.documentElement);\n                        } catch (e2) {\n                            parsed = res;\n                        }\n                    };\n                    return parsed ? parsed : res;\n                })\n            );\n        }\n        return result;\n    }\n\n    private _stringValueOfKey(key: any) {\n        let result: any = [];\n\n        if (key instanceof Array) {\n            key.map( \n                (item: any) => {\n                    if (item instanceof Array) {\n                        let x = [];\n                        item.map(\n                            (subitem) => {\n                                if (subitem.key.length) {\n                                    x.push(subitem.key);\n                                }\n                            }\n                        )\n                        result.push(x.join('.'));\n                    } else if (typeof item === 'string') {\n                        const i = item.indexOf('[');\n                        const j = item.indexOf(']');\n                        const k = item.length > (j + 1) ? 2 : 1;\n                        result.push(i > 0 ? item.substring(0,i) : j > 0 ? item.substring(j + k) : item);\n                    } else if (item.key.length) {\n                        result.push(item.key);\n                    }\n                }\n            );\n            result = result.join(',');\n            result = result.indexOf('.') < 0 ? result.replace(/\\,/g, '.') : result;\n        } else {\n            result = key.key;\n        }\n        return result;\n    }\n\n    private _addToResult(value: any, key: string, operation: any, action: any) {\n        const path = this._stringValueOfKey(action.path);\n        const key2 = this._stringValueOfKey(key);\n        let op = operation.result[path];\n        let complete = false;\n    \n        if (!op) {\n            operation.result[path] = {};\n        }\n        if (op) {\n            let opk = op[key2];\n            if (operation['temp'] &&\n                operation['temp'][key2]) {\n                op[key2] = [op[key2]];\n                delete operation['temp'];\n            }else if (opk && (opk instanceof Array) === false) {\n                operation.result[path][key2] = [opk]\n                op = operation.result[path];\n            }\n            value = this._normalize(value, action.deepXml);\n            if (op[key2]) {\n                if (typeof value === 'object') {\n                    if (JSON.stringify(value) !== JSON.stringify(op[key2][0])) {\n                        op[key2].push( value[key2] ? value[key2] : value );\n                    }\n                } else {\n                    op[key2].push( value[key2] ? value[key2] : value );\n                }\n            } else {\n                if ((op instanceof Array) === false) {\n                    operation.result[path] = [op];\n                    operation.result[path].push( value[key2] ? value[key2] : value );\n                } else {\n                    if (typeof value === 'object') {\n                        if (JSON.stringify(value) !== JSON.stringify(op[0])) {\n                            op.push( value[key2] ? value[key2] : value );\n                        }\n                    } else {\n                        op.push( value[key2] ? value[key2] : value );\n                    }\n                }\n            }\n        } else {\n            if (value instanceof Array) {\n                // if already an array remember it.\n                if (!operation['temp']) {\n                    operation['temp'] = {};\n                }\n                if (!operation['temp'][key2]) {\n                    operation['temp'][key2] = true;\n                }\n            }\n            operation.result[path][key2] = this._normalize(value, action.deepXml);\n            complete = true;\n        }\n        return complete;\n    }\n\n    private _pack(result: any) {\n        if (result instanceof Array) {\n            const list = [];\n            result.map(\n                (item) => {\n                    list.push(this._pack(item));\n                }\n            );\n            result = list;\n        } else if (typeof result === 'object') {\n            const keys = Object.keys(result);\n            keys.map (\n                (key) => {\n                    const item = result[key];\n                    if (item instanceof Array) {\n\n                    } else if (item[key]) {\n                        result[key] = item[key];\n                    }\n                }\n            )\n        }\n        return result;\n    }\n\n    private _triggerResult(promise: any, as: any, result: any) {\n        const x = this._pack(result);\n        let saveAs: any;\n        if (as) {\n            if (typeof as === 'string') {\n                saveAs = {};\n                saveAs[as] = x;\n            } else if (typeof as === 'object') {\n                saveAs = as;\n            }\n        }\n        promise.next(x);\n        return saveAs;\n    }\n\n    private _subquery(\n        promise: any,\n        path: any,\n        operation: any,\n        action: any) {\n\n        if (operation.cachedFiles[path] === undefined) {\n            // one of the keys at this level could be referencing the same file which\n            // is not yet fetched. need to wait till it is available.\n            operation.cachedFiles[path] = new BehaviorSubject<any>(null);\n            this._queryIteration(\n                operation.cachedFiles[path],\n                operation,\n                {\n                    path: action.path,\n                    in: action.in,\n                    deepXml: action.deepXml,\n                    join: action.join,\n                    handler: action.handler,\n                    queryItems: (action.path instanceof Array) ? action.path.length : 1\n                },\n                path\n            );\n        }\n\n        // wait for result raised above.\n        operation.cachedFiles[path].subscribe(\n            (source: any) => {\n                if (source) {\n                    const opkeyi = action.join ? action.join[action.path] : undefined;\n                    if (opkeyi) {\n                        if (source instanceof Array) {\n                            source.map(\n                                (item) => {\n                                    this._subquery(\n                                        promise,\n                                        item,\n                                        operation,\n                                        {\n                                            path: opkeyi.path,\n                                            in: opkeyi.in == undefined ? action.in : (opkeyi.in + item),\n                                            deepXml: opkeyi.deepXml,\n                                            join: opkeyi.join,\n                                            handler: opkeyi.handler,\n                                            queryItems: (opkeyi.path instanceof Array) ? opkeyi.path.length : 1\n                                        }\n                                    );\n                                }\n                            )\n                        } else {\n                            this._subquery(\n                                promise,\n                                source,\n                                operation,\n                                {\n                                    path: action.join[opkeyi.path],\n                                    in: opkeyi.in == undefined ? action.in : (opkeyi.in + source),\n                                    deepXml: action.deepXml,\n                                    join: opkeyi.join,\n                                    handler: opkeyi.handler,\n                                    queryItems: (opkeyi.path instanceof Array) ? opkeyi.path.length : 1\n                                }\n                            );\n                        }\n                    } else if (this._addToResult(source, action.path, operation, action)) {\n                        action.queryItems--;\n                        if (action.queryItems === 0) {\n                            operation.as = this._triggerResult(promise, operation.as, operation.result);\n                        }\n                    }else {\n                        action.queryItems--;\n                        operation.as = this._triggerResult(promise, operation.as, operation.result);\n                    }\n                }\n            },\n            (error: any) => {\n                if (this.logEnabled) {\n                    console.log(error);\n                }\n                action.queryItems--;\n                operation.as = this._triggerResult(promise, operation.as, operation.result);\n           }\n        );\n    }\n    /*\n    * Iterates through a chain query.\n    * @param promise The promise which original caller is waiting for.\n    * @param operation data for keeping track of the iteration.\n    * @param action contains: {path: current keys to query for, in: current query path, handler: resolver method}.\n    * @param cacheNamed The cached name from previous iteration if any.\n    * @returns returns none.\n    */\n    private _queryIteration(\n        promise: BehaviorSubject<any>,\n        operation: any,\n        action: any,\n        cacheNamed?: string) {\n\n        if (!action.handler) {\n            action.handler = (node: any, path: string, value: any) => value;\n        }\n        this._select(action.path, action.in, action.deepXml, operation.as, action.handler).subscribe(\n            (data) => {\n                if (data) {\n                    if (cacheNamed) {\n                        // result of n-th level call to be placed on previous level cache reference.\n                        operation.cachedFiles[cacheNamed].next(data);\n                    } else {\n                        if (data instanceof Array) {\n                            const operationalKey = action.join ? action.join[action.path] : undefined;\n                            if (operationalKey) {\n                                // assumption is the resulting list is a list of file paths.\n                                data.map( (content) => {\n                                    const path = content['#text'] ? content['#text'] : content;\n                                    let size = (operationalKey.path instanceof Array) ? operationalKey.path.length : 1;\n\n                                    if (operationalKey.in == undefined) {\n                                        operation.cachedFiles[path] = this._select(\n                                            operationalKey.path,\n                                            action.in,\n                                            operationalKey.deepXml,\n                                            operation.as,\n                                            operationalKey.handler\n                                        );\n                                        size --;\n                                    }\n                                    this._subquery(promise, path, operation, {\n                                        path: operationalKey.path,\n                                        in: operationalKey.in == undefined ? action.in : (operationalKey.in + content),\n                                        deepXml: operationalKey.deepXml,\n                                        join: operationalKey.join,\n                                        handler: operationalKey.handler,\n                                        queryItems: size\n                                    });\n                                });\n                            } else {\n                                // no more query in the chain.\n                                action.queryItems--;\n                                if (action.queryItems === 0) {\n                                    const result =operation.result ? operation.result : {};\n                                    operation.as = this._triggerResult(promise, operation.as, Object.keys(operation.result).length ? operation.result : data);\n                                }\n                            }\n                        } else if (typeof data === 'object') {\n                            Object.keys(data).map( (key) => {\n                                const content = data[key];\n                                const operationalKey = action.join ? action.join[key]: undefined;\n    \n                                if (content && content.length && operationalKey) {\n                                    let size = (operationalKey.path instanceof Array) ? operationalKey.path.length : 1;\n                                    if (operationalKey.in == undefined) {\n                                        operation.cachedFiles[content] = this._select(\n                                            operationalKey.path,\n                                            action.in,\n                                            operationalKey.deepXml,\n                                            operation.as,\n                                            operationalKey.handler\n                                        );\n                                        size --;\n                                    }\n                                    this._subquery(\n                                        promise,\n                                        content,\n                                        operation,\n                                        {\n                                            path: operationalKey.path,\n                                            in: operationalKey.in == undefined ? action.in : (operationalKey.in + content),\n                                            deepXml: operationalKey.deepXml,\n                                            handler: operationalKey.handler,\n                                            queryItems: size\n                                        }\n                                    );\n                                } else {\n                                    action.queryItems--;\n                                    if (content) {\n                                        if (!operation.result) {\n                                            operation.result = {};\n                                        }\n                                        if (operation.result instanceof Array) {\n                                            operation.result.push(content);\n                                        } else {\n                                            operation.result[key] = content;\n                                        }\n                                    }\n                                    if (action.queryItems === 0) {\n                                        operation.as = this._triggerResult(promise, operation.as, Object.keys(operation.result).length ? operation.result : data);\n                                    }\n                                }\n                            });\n                        } else {\n                            action.queryItems--;\n                            if (action.queryItems === 0) {\n                                if (Object.keys(operation.result).length === 0 && data !== undefined) {\n                                    operation.result = data;\n                                }\n                            }\n                            operation.as = this._triggerResult(promise, operation.as, operation.result);\n                        }\n                    }\n                }\n            },\n            (error: any) => {\n                promise.error({\n                    message: 'failed to query ' + action.path,\n                    reason: error.message ? error.message : error\n                });\n                action.queryItems--;\n                if (action.queryItems === 0) {\n                    operation.as = this._triggerResult(promise, operation.as, operation.result);\n                }\n            }\n        );\n    }\n\n    private _makeArguments(key: string) {\n        const list = key.split('.');\n        const result = [];\n        list.map( (item) => {\n            const b = item.indexOf('[');\n            if (b < 0) {\n                result.push({\n                    key: item,\n                    validated: [(data: any, as: any) => true]\n                });\n            } else {\n                let str = item.substring(b + 1, item.length - 1);\n                const vList = str.split('][');\n                const object = {\n                    key: item.substring(0,b),\n                    validated: [(data: any, as: any) => true]\n                };\n                vList.map( \n                    (filter) => {\n                        filter = filter.replace(/\\`/g, '.');\n                        filter = filter.replace(/\\@/g, 'data');\n                        if (filter.indexOf('order-by:') > -1) {\n                            const arg: any = filter.substring(filter.indexOf('order-by:') + 10).trim();\n                            const arglist = arg.split('~');\n                            const key = arglist[0].trim();\n                            const order= arglist[1] ? arglist[1].trim().toLowerCase(): 'asc';\n                            object['sort'] = function (array: any) {\n                                const _valueOf = (key: string, p: any) => {\n                                    key.split('.').map( (x) => {p = p[x]});\n                                    return p;\n                                }\n                                return array.sort(\n                                    function(a: any,b: any){\n                                        const flag =_valueOf(key, a) > _valueOf(key, b);\n                                        return flag ? (order === 'asc' ? 1: -1) : (order === 'asc' ? -1: 1);\n                                    }\n                                );\n                            }\n                        }else {\n                            const t = filter.indexOf('&&') > 0 || filter.indexOf('||') > 0;\n                            let f = 'return function (data, asList) { \\n';\n                            f += this._globalFunctions();\n                            f += 'var x = false;\\n try{\\n x = ';\n                            f += (t ? '(' + filter + ')' : filter) + '; \\n}catch(e){}\\n return x;\\n}';\n                            object['validated'].push( new Function(f)() );\n                        }\n                    }\n                );\n                result.push(object);\n            }\n        });\n        return result;\n    }\n\n    private _handleSpecialCharacters(path: string) {\n        let result = [];\n        path.split(']').map(\n            (item) => {\n                const bindex = item.indexOf('[');\n                if (bindex >= 0) {\n                    let x = '';\n                    if ( bindex > 0) {\n                        x += item.substring(0, bindex);\n                    }\n                    x += item.substring(bindex).replace(/\\./g,'`');\n                    result.push(x);\n                } else {\n                    result.push(item);\n                }\n            }\n        );\n        return result.join(']');\n    }\n    private _prepareJsonPath(path: any) {\n        let result: any;\n        if (path instanceof Array) {\n            result = [];\n            path.map(\n                (i) => {\n                    const x = this._handleSpecialCharacters(i);\n                    result.push(this._makeArguments(x));\n                }\n            );\n        } else {\n            const x = this._handleSpecialCharacters(path);\n            result = this._makeArguments(x);\n        }\n        return result;\n    }\n    \n    private _select(\n        path: any,\n        from: string,\n        deepXml: boolean,\n        as: any,\n        clause?: clauseEvaluator): BehaviorSubject<any> {\n\n        const dataStore = new BehaviorSubject<any>(null);\n\n        this._get(from).subscribe(\n            (data: any) => {\n                let result: any;\n                const jpath = this._prepareJsonPath(path);\n\n                if (!clause) {\n                    clause = (node: any, path: string, value: any) => value;\n                }\n                if (path instanceof Array) {\n                    result = {};\n                    jpath.map((pathItem) => {\n                        const y = this._valueOfJsonPath(pathItem, data, as, deepXml, clause);\n                        if (y) {\n                            let key = this._stringValueOfKey(pathItem);\n                            result[key] = y;\n                        }\n                    });\n                    if (Object.keys(result).length === 0) {\n                        result = undefined;\n                    }\n                } else if (typeof path === 'string') {\n                    result = this._valueOfJsonPath(jpath, data, as, deepXml, clause);\n                }\n                if (result) {\n                    dataStore.next(result);\n\n                } else {\n                    dataStore.error('Result not found for ' + path);\n                }\n            },\n            (error: any) => {\n                dataStore.error(error);\n            }\n        );\n        return dataStore;\n    }\n\n    /*\n    * Will convert the xml into a json.\n    * @param xml XML to be converted.\n    * @returns returns converted JSON.\n    */\n    private _xml2json(xml: any) {\n        try {\n            let obj = {};\n            if (xml.attributes) {\n                const c = xml.attributes;\n                for (let i = 0; i < c.length; i++) {\n                const attr = c[i];\n                obj[attr.name] = attr.value;\n                }\n            }\n            if (xml.childNodes && xml.childNodes.length) {\n                for (let i = 0; i < xml.childNodes.length; i++) {\n                    const item = xml.childNodes[i];\n                    const nodeName = item.nodeName;\n\n                    if (obj[nodeName] === undefined) {\n                        const fragment = this._xml2json(item);\n                        if (fragment) {\n                        obj[nodeName] = fragment;\n                        }\n                    } else {\n                        if (obj[nodeName].push === undefined) {\n                            const old = obj[nodeName];\n\n                            obj[nodeName] = [];\n                            obj[nodeName].push(old);\n                        }\n                        const fragment = this._xml2json(item);\n                        if (fragment) {\n                            obj[nodeName].push(fragment);\n                        }\n                    }\n                }\n            } else {\n                const text = xml.textContent.trim().replace(/(?:\\r\\n|\\r|\\n|\\t)/g, '');\n                obj = text.length ? text : undefined;\n            }\n            return obj;\n        } catch (e) {\n            if (this.logEnabled) {\n                console.log(e.message);\n            }\n        }\n    }\n\n    /*\n    * Will do a chain query on specified paths from remote location.\n    * @param chainQuery A Json structure with paths. Each path will contain a chain of instructions.\n    * Each instruction will have a 'in' to a file and a path to search on it (see. select()). once the\n    * result is in, the next instruction in the path chain will be trigged. After the path through all\n    * chained paths is completed, resulting value will be put in a json where its path is the original\n    * json path and its value will be the resulting value.\n    *\n    * this is not fully tested. caller should pass something like\n    * {path: [path1,path2], in: 'something or blank', deepXml: true, join: {k1: {path: path3, in: 'something or plank', clause: function}}}\n    * if path1 or path2 or path3 are found at the root object, a chain reaction to fetch deep will follow. An\n    * optional clause will help resolve complex situations.\n    *\n    * @returns returns an observable. the caller should subscribe to this in order to receive the result.\n    */\n    chainSelect(chainQuery: any): BehaviorSubject<any> {\n        const size = (chainQuery.path instanceof Array) ?  chainQuery.path.length : 1;\n        const operation = {cachedFiles: {}, as: {}, result: {}};\n        const dataStore = new BehaviorSubject<any>(null);\n\n        operation.cachedFiles[chainQuery.path] = dataStore;\n        this._queryIteration(\n            dataStore,\n            operation,\n            {\n                path: chainQuery.path,\n                in: chainQuery.in,\n                deepXml: chainQuery.deepXml,\n                join: chainQuery.join,\n                handler: chainQuery.handler,\n                queryItems: size\n            }\n        );\n        return dataStore;\n    }\n\n    /*\n    * Will group file paths if they are similar to avoid multiple calls.\n    * @param list A list of Json {paths, in, deepXml} structures. deepXml is optional.\n    * @param clause A method by which value(s) for the path(s) could be evaluated. the caller would evaluate the value for a given attribute.\n    * @returns returns an observable. the caller should subscribe to this in order to receive the result.\n    */\n    arraySelect(\n        list: any,\n        clause?: clauseEvaluator): BehaviorSubject<any>  {\n        const groupedList = {};\n        list.map( (item: any) => {\n            if (groupedList[item.in] === undefined) {\n                groupedList[item.in] = [];\n            }\n            groupedList[item.in].push({path: item.path, deepXml: item.deepXml});\n        });\n        const dataStore = new BehaviorSubject<any>(null);\n\n        Object.keys(groupedList).map ( (url) => {\n            this._select(groupedList[url].path, url, groupedList[url].deepXml, undefined, clause).subscribe(\n                (data: any) => {\n                    if (data) {\n                        dataStore.next(data);\n                    }\n                },\n                (error: any) => {\n                    dataStore.error(error);\n                }\n            );\n        });\n        return dataStore;\n    }\n\n    /*\n    * Will query path from a remote location qualified through an optional clause function that\n    * evaluates, filters, or sorts the resul of the query.\n    * @param path A a single JSON path or list of paths to select (i.e., 'a.b.c')\n    * @param from A reference URL to a remote source.\n    * @param deepXml if cdata-section should be parsed.\n    * @param clause A method by which value(s) for the path(s) could be evaluated. the caller would evaluate the value for a given attribute.\n    * @returns returns an observable. the caller should subscribe to this in order to receive the result.\n    */\n    select(\n        path: any,\n        from: string,\n        deepXml: boolean,\n        clause?: clauseEvaluator): BehaviorSubject<any> {\n\n        return this._select(path, from, deepXml, undefined, clause);\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { WizardQueryService } from './wizard-query.service';\n\n@Component({\n  selector: 'wizard-query',\n  templateUrl: './wizard-query.html',\n  styleUrls: ['./wizard-query.scss']\n})\nexport class WizardQueryComponent {\n  selectedDocumentName: string;\n\n  data: any;\n  source: any;\n  query: any;\n  \n  @Input()\n  set queryInfo(data: any) {\n    this.query = data;\n    if (this.query) {\n      this.selectedDocumentName = this.query.in.substring(this.query.in.lastIndexOf('/'));\n      this.queryService.chainSelect({\n        in: this.query.in,\n        path: ''\n      }).subscribe(\n        (success) => {\n          if(success) {\n            this.source = success;\n            this.data = undefined;\n          }\n        },\n        (error) => {\n          this.source = error;\n          this.data = undefined;\n        }\n      );\n    } else {\n      this.data = undefined;\n      this.source = undefined;\n    }\n  }\n\n  constructor(private queryService: WizardQueryService) {\n  }\n\n  private parseFunctions(content: any) {\n    if (content instanceof Array) {\n      content.map(\n        (item) => {\n          this.parseFunctions(item);\n        }\n      )\n    } else if (typeof content === 'object') {\n      Object.keys(content).map(\n        (key) => {\n          if (key === 'handler') {\n            content[key] = new Function('return function' + content[key])();\n          } else {\n            this.parseFunctions(content[key]);\n          }\n        }\n      );\n    }\n  }\n\n  executeQuery(text: any) {\n    try {\n      const content = JSON.parse(text.value);\n      this.parseFunctions(content)\n      if (content instanceof Array) {\n        this.queryService.arraySelect(content).subscribe(\n          (success) => {\n            if(success) {\n              this.data = success;\n            }\n          },\n          (error) => {\n            this.data = {alert: error};\n          }\n        );\n      } else {\n        this.queryService.chainSelect(content).subscribe(\n          (success) => {\n            if(success) {\n              this.data = success;\n            }\n          },\n          (error) => {\n            this.data = {alert: error};\n          }\n        );\n      }\n    }catch (err) {\n      this.data = {alert: err.message};\n    }\n  }\n}\n","import {\r\n    Directive,\r\n    Input,\r\n    Output,\r\n    EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { WizardQueryService } from './wizard-query.service';\r\n\r\n@Directive({\r\n    selector: '[wizardQuery]'\r\n})\r\nexport class WizardQueryDirective {\r\n    query: any;\r\n\r\n            \r\n    @Output()\r\n    onQueryResult: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output()\r\n    onQueryError: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input()\r\n    set wizardQuery(info: any) {\r\n        this.query = info;\r\n        if (this.query) {\r\n            if (this.query instanceof Array) {\r\n                this.queryService.arraySelect(this.query).subscribe(\r\n                    (success) => {\r\n                        if(success) {\r\n                            this.onQueryResult.emit(success);\r\n                        }\r\n                    },\r\n                    (error) => {\r\n                        this.onQueryResult.emit({alert: error});\r\n                    }\r\n                );\r\n            } else {\r\n                this.queryService.chainSelect(this.query).subscribe(\r\n                    (success) => {\r\n                        if(success) {\r\n                            this.onQueryResult.emit(success);\r\n                        }\r\n                    },\r\n                    (error) => {\r\n                        this.onQueryResult.emit({alert: error});\r\n                    }\r\n                );\r\n            }\r\n        } else {\r\n            this.onQueryResult.emit(undefined);\r\n        }\r\n    }\r\n\r\n    constructor(private queryService: WizardQueryService) {}\r\n\r\n}","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { WizardQueryComponent } from './wizard-query.component';\nimport { WizardQueryService } from './wizard-query.service';\nimport { WizardQueryDirective } from './wizard-query.directive';\n\n\n@NgModule({\n  declarations: [\n    WizardQueryComponent,\n    WizardQueryDirective\n  ],\n  exports: [\n    WizardQueryComponent,\n    WizardQueryDirective\n  ],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [\n    WizardQueryService\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class WizardQueryModule { }\n"]}