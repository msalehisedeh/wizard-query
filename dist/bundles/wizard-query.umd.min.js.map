{"version":3,"sources":["ng://wizard-query/src/app/wizard-query/wizard-query.service.ts","ng://wizard-query/src/app/wizard-query/wizard-query.component.ts","ng://wizard-query/src/app/wizard-query/wizard-query.directive.ts","ng://wizard-query/src/app/wizard-query/wizard-query.module.ts"],"names":["WizardQueryService","http","this","prototype","_globalFunctions","_normalize","value","deepXml","Array","result_1","map","item","push","_this","items","Object","keys","length","result_2","xml","xmldom.DOMParser","parseFromString","documentElement","_xml2json","e","_valueOfJsonPath","path","data","clause","result","x","subkey","node","t_1","sort","key","validated","r_1","v","z","undefined","r_2","split","str","indexOf","t_2","r_3","r_4","_get","url","SERVICE_PATH","dot","lastIndexOf","ext","toLowerCase","substr","headers","HttpHeaders","set","get","responseType","pipe","res","parsed","JSON","parse","e2","_stringValueOfKey","x_1","subitem","join","i","j","k","substring","_addToResult","operation","action","key2","op","complete","opk","_pack","list_1","_triggerResult","promise","next","_subquery","cachedFiles","BehaviorSubject","_queryIteration","in","handler","queryItems","subscribe","source","opkeyi_1","error","logEnabled","console","log","cacheNamed","select","operationalKey_1","content","operationalKey","message","reason","_makeArguments","list","b","vList","object_1","filter","replace","arglist","trim","key_1","order_1","array","_valueOf","p","a","t","f","Function","_handleSpecialCharacters","bindex","_prepareJsonPath","obj","attributes","c","attr","name","childNodes","nodeName","fragment","old","text","textContent","chainSelect","chainQuery","size","dataStore","arraySelect","groupedList","from","jpath","pathItem","y","Injectable","HttpClient","WizardQueryComponent","queryService","defineProperty","query","selectedDocumentName","success","parseFunctions","executeQuery","alert","err","Component","args","selector","template","Input","WizardQueryDirective","EventEmitter","info","onQueryResult","emit","Directive","Output","WizardQueryModule","NgModule","declarations","exports","imports","CommonModule","HttpClientModule","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"+gBAqCA,IAAAA,EAAA,WAqBI,SAAAA,EACUC,GAAAC,KAAAD,KAAAA,oBAJY,oBACF,SAQZD,EAAAG,UAAAC,4BACJ,MAAO,y5BAwCHJ,EAAAG,UAAAE,oBAAWC,EAAYC,cAC3B,GAAID,aAAiBE,MAAO,CACxB,IAAMC,EAAS,GACfH,EAAMI,IAAK,SAACC,GACRF,EAAOG,KAAKC,EAAKR,WAAWM,EAAMJ,MAEtCD,EAAQG,OACL,GAAqB,iBAAVH,EAAoB,CAClC,IAAIQ,EAAaC,OAAOC,KAAKV,GAE7B,GAAqB,IAAjBQ,EAAMG,QAAkBX,EAAMQ,EAAM,cAAeN,MAehD,CACH,IAAMU,EAAS,GACfJ,EAAMJ,IAAK,SAACC,GACRO,EAAOP,GAAQE,EAAKR,WAAWC,EAAMK,GAAOJ,KAEhDD,EAAQY,OAnBR,GAAIZ,EAAM,SACNA,EAAQA,EAAM,cACX,GAAIA,EAAM,oBACbA,EAAQA,EAAM,kBACVC,GACA,IACI,IAAMY,GAAM,IAAIC,EAAAA,WAAmBC,gBAAgBf,GACnDA,EAASa,EAAIG,iBAA0C,MAAvBH,EAAIG,gBACxBpB,KAAKqB,UAAUJ,EAAIG,iBACnBhB,EACf,MAAMkB,KAYvB,OAAOlB,GAUHN,EAAAG,UAAAsB,0BACJC,EACAC,EACApB,EACAqB,GAEA,IAAIC,EACAC,EAAI5B,KAAKG,WAAWsB,EAAMpB,GAsI9B,OArIAmB,EAAKhB,IAAK,SAACqB,GACP,IAAIC,EAAOF,EACX,GAAIE,GAAQA,aAAgBxB,MAAO,CAC/B,IAAMyB,EAAI,GACNF,EAAOG,OACPF,EAAOD,EAAOG,KAAKF,IAEvBA,EAAKtB,IACD,SAACC,GACG,GAAoB,iBAATA,EACP,GAAIoB,EAAOI,IAAIlB,QAEX,IADAa,EAAIC,EAAOI,IAAIlB,OAASN,EAAKoB,EAAOI,KAAOxB,IAClCoB,EAAOK,UAAW,CACvB,IAAIC,GAAI,EACRN,EAAOK,UAAU1B,IAAI,SAAA4B,GACjB,IAAMC,EAAID,EAAER,GACK,kBAANS,EACE,GAANA,IACCF,GAAI,GAGRP,EAAIS,IAGRF,EACAJ,EAAErB,KAAKkB,GAEPA,EAAIU,gBAIZ,GAAIT,EAAOK,UAAW,CAClB,IAAIK,GAAI,EACRV,EAAOK,UAAU1B,IAAI,SAAA4B,GACjB,IAAMC,EAAID,EAAE3B,GACK,kBAAN4B,EACE,GAANA,IACCE,GAAI,GAGR9B,EAAO4B,IAGXE,EACAR,EAAErB,KAAKD,GAEPmB,EAAIU,eAGRP,EAAErB,KAAKD,QAGRoB,EAAOI,IAAIlB,QAA2B,iBAATN,GACpCA,EAAK+B,MAAM,KAAKhC,IACZ,SAACiC,GACkC,GAA3BA,EAAIC,QAAQb,EAAOI,MACnBF,EAAErB,KAAK+B,OAQ/Bd,EADAC,EAAIG,OAED,GAAID,GAAyB,iBAATA,GAIvB,IAHAF,EAAIA,EACAF,EAAOI,EAAMD,EAAOI,IAAKJ,EAAOI,IAAIlB,OAASa,EAAEC,EAAOI,KAAOL,GAC7DU,YACKV,aAAatB,MAAO,CACzB,IAAMqC,EAAI,GACNd,EAAOG,OACPJ,EAAIC,EAAOG,KAAKJ,IAEpBA,EAAEpB,IACE,SAACC,GACG,GAAIoB,EAAOK,UAAW,CAClB,IAAIU,GAAI,EACRf,EAAOK,UAAU1B,IAAI,SAAA4B,GACjB,IAAMC,EAAID,EAAE3B,GACK,kBAAN4B,EACE,GAANA,IACCO,GAAI,GAGRnC,EAAO4B,IAGXO,EACAD,EAAEjC,KAAKD,GAEPmB,EAAIU,aAMpBX,EADAC,EAAIe,OAED,GAAIf,EACP,GAAIC,EAAOK,UAAW,CAClB,IAAIW,GAAI,EACRhB,EAAOK,UAAU1B,IAAI,SAAA4B,GACjB,IAAMC,EAAID,EAAER,GACK,kBAANS,EACE,GAANA,IACCQ,GAAI,GAGRjB,EAAIS,IAGRQ,EACAlB,EAASC,EAETA,EAAIU,eAGRX,EAASC,OAGVE,GAAyB,iBAATA,GAAsBD,EAAOI,IAAIlB,QACxDY,EAAS,GACTG,EAAKU,MAAM,KAAKhC,IACZ,SAACC,GACmC,GAA5BA,EAAKiC,QAAQb,EAAOI,MACpBN,EAAOjB,KAAKD,MAKxBkB,EAASG,IAGVH,GAGH7B,EAAAG,UAAA6C,cAAKtB,cACHuB,EAAM/C,KAAKgD,aAAexB,EAC1ByB,EAAMzB,EAAK0B,YAAY,KACvBC,EAAMF,EAAM,EAAIX,UAAYd,EAAK4B,cAAcC,OAAOJ,GACtDK,EAAU,IAAIC,EAAAA,YAuCpB,OApCAD,EAAQE,IAAI,8BAA+B,KAE/B,SAARL,GACAG,EAAQE,IAAI,eAAgB,uBAAuBA,IAAI,SAAU,QACxDxD,KAAKD,KAAK0D,IAAIV,EAAK,CAAEO,QAAOA,EAAEI,aAAc,SAChDC,KAAKnD,EAAAA,IAAI,SAACoD,GACP,IAAM3C,GAAM,IAAIC,EAAAA,WAAmBC,gBAAgByC,GAEnD,OADajD,EAAKU,UAAUJ,EAAIG,qBAIzB,SAAR+B,GACPG,EAAQE,IAAI,eAAgB,uBAAuBA,IAAI,SAAU,QACxDxD,KAAKD,KAAK0D,IAAIV,EAAK,CAAEO,QAAOA,EAAEI,aAAc,SAAUC,KAAKnD,EAAAA,IAAI,SAACoD,GAAQ,OAAAA,MAClE,UAART,GACPG,EAAQE,IAAI,eAAgB,uBAAuBA,IAAI,SAAU,QACxDxD,KAAKD,KAAK0D,IAAIV,EAAK,CAACO,QAAOA,IAAGK,KAAKnD,EAAAA,IAAI,SAACoD,GAAQ,OAAAA,OAEzDN,EAAQE,IAAI,eAAgB,uBAAuBA,IAAI,SAAU,QACxDxD,KAAKD,KAAK0D,IAAIV,EAAK,CAAEO,QAAOA,EAAEI,aAAc,SAChDC,KAAKnD,EAAAA,IAAI,SAACoD,GACP,IAAIC,EACJ,IACIA,EAASC,KAAKC,MAAMH,GACvB,MAAOtC,GACJ,IACI,IAAML,GAAM,IAAIC,EAAAA,WAAmBC,gBAAgByC,GACnDC,EAASlD,EAAKU,UAAUJ,EAAIG,iBAC9B,MAAO4C,GACLH,EAASD,GAGjB,OAAOC,GAAkBD,OAOjC9D,EAAAG,UAAAgE,2BAAkBhC,GACtB,IAAMN,EAAS,GA4Bf,OA1BIM,aAAe3B,MACf2B,EAAIzB,IACA,SAACC,GACG,GAAIA,aAAgBH,MAAO,CACvB,IAAI4D,EAAI,GACRzD,EAAKD,IACD,SAAC2D,GACOA,EAAQlC,IAAIlB,QACZmD,EAAExD,KAAKyD,EAAQlC,OAI3BN,EAAOjB,KAAKwD,EAAEE,KAAK,WAChB,GAAoB,iBAAT3D,EAAmB,CACjC,IAAM4D,EAAI5D,EAAKiC,QAAQ,KACjB4B,EAAI7D,EAAKiC,QAAQ,KACjB6B,EAAI9D,EAAKM,OAAUuD,EAAI,EAAK,EAAI,EACtC3C,EAAOjB,KAAS,EAAJ2D,EAAQ5D,EAAK+D,UAAU,EAAEH,GAAS,EAAJC,EAAQ7D,EAAK+D,UAAUF,EAAIC,GAAK9D,QACnEA,EAAKwB,IAAIlB,QAChBY,EAAOjB,KAAKD,EAAKwB,OAK7BN,EAAOjB,KAAKuB,EAAIA,KAEbN,EAAOyC,KAAK,MAGftE,EAAAG,UAAAwE,sBAAarE,EAAY6B,EAAayC,EAAgBC,GAC1D,IAAMnD,EAAOxB,KAAKiE,kBAAkBU,EAAOnD,MACrCoD,EAAO5E,KAAKiE,kBAAkBhC,GAChC4C,EAAKH,EAAU/C,OAAOH,GACtBsD,GAAW,EAKf,GAHKD,IACDH,EAAU/C,OAAOH,GAAQ,IAEzBqD,EAAI,CACJ,IAAIE,EAAMF,EAAGD,GACTF,EAAgB,MAChBA,EAAgB,KAAEE,IAClBC,EAAGD,GAAQ,CAACC,EAAGD,WACRF,EAAgB,MACjBK,GAAQA,aAAezE,QAAW,IACxCoE,EAAU/C,OAAOH,GAAMoD,GAAQ,CAACG,GAChCF,EAAKH,EAAU/C,OAAOH,IAE1BpB,EAAQJ,KAAKG,WAAWC,EAAOuE,EAAOtE,SAClCwE,EAAGD,GACHC,EAAGD,GAAMlE,KAAMN,EAAMwE,GAAQxE,EAAMwE,GAAQxE,GAEtCyE,aAAcvE,QAAW,GAC1BoE,EAAU/C,OAAOH,GAAQ,CAACqD,GAC1BH,EAAU/C,OAAOH,GAAMd,KAAMN,EAAMwE,GAAQxE,EAAMwE,GAAQxE,IAEzDyE,EAAGnE,KAAMN,EAAMwE,GAAQxE,EAAMwE,GAAQxE,QAIzCA,aAAiBE,QAEZoE,EAAgB,OACjBA,EAAgB,KAAI,IAEnBA,EAAgB,KAAEE,KACnBF,EAAgB,KAAEE,IAAQ,IAGlCF,EAAU/C,OAAOH,GAAMoD,GAAQ5E,KAAKG,WAAWC,EAAOuE,EAAOtE,SAC7DyE,GAAW,EAEf,OAAOA,GAGHhF,EAAAG,UAAA+E,eAAMrD,cACV,GAAIA,aAAkBrB,MAAO,CACzB,IAAM2E,EAAO,GACbtD,EAAOnB,IACH,SAACC,GACGwE,EAAKvE,KAAKC,EAAKqE,MAAMvE,MAG7BkB,EAASsD,OACN,GAAsB,iBAAXtD,EAAqB,CACtBd,OAAOC,KAAKa,GACpBnB,IACD,SAACyB,GACG,IAAMxB,EAAOkB,EAAOM,GAChBxB,aAAgBH,OAETG,EAAKwB,KACZN,EAAOM,GAAOxB,EAAKwB,MAKnC,OAAON,GAGH7B,EAAAG,UAAAiF,wBAAeC,EAAcxD,GACjCwD,EAAQC,KAAKpF,KAAKgF,MAAMrD,KAGpB7B,EAAAG,UAAAoF,mBACJF,EACA3D,EACAkD,EACAC,cAEID,EAAUY,YAAY9D,KAAUc,YAGhCoC,EAAUY,YAAY9D,GAAQ,IAAI+D,EAAAA,gBAAqB,MACvDvF,KAAKwF,gBACDd,EAAUY,YAAY9D,GACtBkD,EACA,CACIlD,KAAMmD,EAAOnD,KACbiE,KAAId,EAAOc,MACXpF,QAASsE,EAAOtE,QAChB+D,KAAMO,EAAOP,KACbsB,QAASf,EAAOe,QAChBC,WAAahB,EAAOnD,gBAAgBlB,MAASqE,EAAOnD,KAAKT,OAAS,GAEtES,IAKRkD,EAAUY,YAAY9D,GAAMoE,UACxB,SAACC,GACG,GAAIA,EAAQ,CACR,IAAMC,EAASnB,EAAOP,KAAOO,EAAOP,KAAKO,EAAOnD,MAAQc,UACpDwD,EACID,aAAkBvF,MAClBuF,EAAOrF,IACH,SAACC,GACGE,EAAK0E,UACDF,EACA1E,EACAiE,EACA,CACIlD,KAAMsE,EAAOtE,KACbiE,KAAIK,EAAOL,MAAKhF,EAChBJ,QAASyF,EAAOzF,QAChB+D,KAAM0B,EAAO1B,KACbsB,QAASI,EAAOJ,QAChBC,WAAaG,EAAOtE,gBAAgBlB,MAASwF,EAAOtE,KAAKT,OAAS,MAMlFJ,EAAK0E,UACDF,EACAU,EACAnB,EACA,CACIlD,KAAMmD,EAAOP,KAAK0B,EAAOtE,MACzBiE,KAAIK,EAAOL,MAAKI,EAChBxF,QAASsE,EAAOtE,QAChB+D,KAAM0B,EAAO1B,KACbsB,QAASI,EAAOJ,QAChBC,WAAaG,EAAOtE,gBAAgBlB,MAASwF,EAAOtE,KAAKT,OAAS,IAIvEJ,EAAK8D,aAAaoB,EAAQlB,EAAOnD,KAAMkD,EAAWC,IACzDA,EAAOgB,aACmB,IAAtBhB,EAAOgB,YACPhF,EAAKuE,eAAeC,EAAST,EAAU/C,UAG3CgD,EAAOgB,aACPhF,EAAKuE,eAAeC,EAAST,EAAU/C,WAInD,SAACoE,GACOpF,EAAKqF,YACLC,QAAQC,IAAIH,GAEhBpB,EAAOgB,aACPhF,EAAKuE,eAAeC,EAAST,EAAU/C,WAY3C7B,EAAAG,UAAAuF,yBACJL,EACAT,EACAC,EACAwB,cAEKxB,EAAOe,UACRf,EAAOe,QAAU,SAAC5D,EAAWN,EAAcpB,GAAe,OAAAA,IAE9DJ,KAAKoG,OAAOzB,EAAOnD,KAAMmD,EAAOc,MAAId,EAAOtE,QAASsE,EAAOe,SAASE,UAChE,SAACnE,GACG,GAAIA,EACA,GAAI0E,EAEAzB,EAAUY,YAAYa,GAAYf,KAAK3D,QAEvC,GAAIA,aAAgBnB,MAAO,CACvB,IAAM+F,EAAiB1B,EAAOP,KAAOO,EAAOP,KAAKO,EAAOnD,MAAQc,UAChE,GAAI+D,EAEA5E,EAAKjB,IAAK,SAAC8F,GACP,IAAM9E,EAAO8E,EAAQ,SAAWA,EAAQ,SAAWA,EACnD3F,EAAK0E,UAAUF,EAAS3D,EAAMkD,EAAW,CACrClD,KAAM6E,EAAe7E,KACrBiE,KAAIY,EAAeZ,MAAKa,EACxBjG,QAASgG,EAAehG,QACxB+D,KAAMiC,EAAejC,KACrBsB,QAASW,EAAeX,QACxBC,WAAaU,EAAe7E,gBAAgBlB,MAAS+F,EAAe7E,KAAKT,OAAS,WAM1F,GADA4D,EAAOgB,aACmB,IAAtBhB,EAAOgB,WAAkB,CACXjB,EAAU/C,QAAS+C,EAAU/C,OAC3ChB,EAAKuE,eAAeC,EAAStE,OAAOC,KAAK4D,EAAU/C,QAAQZ,OAAS2D,EAAU/C,OAASF,QAGxE,iBAATA,EACdZ,OAAOC,KAAKW,GAAMjB,IAAK,SAACyB,GACpB,IAAMqE,EAAU7E,EAAKQ,GACfsE,EAAiB5B,EAAOP,KAAOO,EAAOP,KAAKnC,GAAMK,UAEnDgE,GAAWA,EAAQvF,QAAUwF,EAC7B5F,EAAK0E,UACDF,EACAmB,EACA5B,EACA,CACIlD,KAAM+E,EAAe/E,KACrBiE,KAAIc,EAAed,MAAKa,EACxBjG,QAASkG,EAAelG,QACxBqF,QAASa,EAAeb,QACxBC,WAAaY,EAAe/E,gBAAgBlB,MAASiG,EAAe/E,KAAKT,OAAS,KAI1F4D,EAAOgB,aACHW,IACK5B,EAAU/C,SACX+C,EAAU/C,OAAS,IAEnB+C,EAAU/C,kBAAkBrB,MAC5BoE,EAAU/C,OAAOjB,KAAK4F,GAEtB5B,EAAU/C,OAAOM,GAAOqE,GAGN,IAAtB3B,EAAOgB,YACPhF,EAAKuE,eAAeC,EAAStE,OAAOC,KAAK4D,EAAU/C,QAAQZ,OAAS2D,EAAU/C,OAASF,OAKnGkD,EAAOgB,aACmB,IAAtBhB,EAAOgB,YACsC,IAAzC9E,OAAOC,KAAK4D,EAAU/C,QAAQZ,QAAgBU,IAASa,YACvDoC,EAAU/C,OAASF,GAG3Bd,EAAKuE,eAAeC,EAAST,EAAU/C,UAKvD,SAACoE,GACGZ,EAAQY,MAAM,CACVS,QAAS,mBAAqB7B,EAAOnD,KACrCiF,OAAQV,EAAMS,QAAUT,EAAMS,QAAUT,IAE5CpB,EAAOgB,aACmB,IAAtBhB,EAAOgB,YACPhF,EAAKuE,eAAeC,EAAST,EAAU/C,WAM/C7B,EAAAG,UAAAyG,wBAAezE,cACb0E,EAAO1E,EAAIO,MAAM,KACjBb,EAAS,GAiDf,OAhDAgF,EAAKnG,IAAK,SAACC,GACP,IAAMmG,EAAInG,EAAKiC,QAAQ,KACvB,GAAIkE,EAAI,EACJjF,EAAOjB,KAAK,CACRuB,IAAKxB,EACLyB,UAAW,CAAC,SAACT,GAAS,OAAA,UAEvB,CACH,IACMoF,EADIpG,EAAK+D,UAAUoC,EAAI,EAAGnG,EAAKM,OAAS,GAC5ByB,MAAM,MAClBsE,EAAS,CACX7E,IAAKxB,EAAK+D,UAAU,EAAEoC,GACtB1E,UAAW,CAAC,SAACT,GAAS,OAAA,KAE1BoF,EAAMrG,IACF,SAACuG,GAGG,IAAmC,GADnCA,GADAA,EAASA,EAAOC,QAAQ,MAAO,MACfA,QAAQ,MAAO,SACpBtE,QAAQ,aAAmB,CAClC,IACMuE,EADWF,EAAOvC,UAAUuC,EAAOrE,QAAQ,aAAe,IAAIwE,OAChD1E,MAAM,KACpB2E,EAAMF,EAAQ,GAAGC,OACjBE,EAAOH,EAAQ,GAAKA,EAAQ,GAAGC,OAAO9D,cAAe,MAC3D0D,EAAa,KAAI,SAAUO,GACvB,IAAMC,EAAW,SAACrF,EAAasF,GAE3B,OADAtF,EAAIO,MAAM,KAAKhC,IAAK,SAACoB,GAAO2F,EAAIA,EAAE3F,KAC3B2F,GAEX,OAAOF,EAAMrF,KACT,SAASwF,EAAOZ,GAEZ,OADYU,EAASH,EAAKK,GAAKF,EAASH,EAAKP,GACpB,QAAVQ,EAAkB,GAAI,EAAgB,QAAVA,GAAmB,EAAG,SAI3E,CACF,IAAMK,EAA2B,EAAvBV,EAAOrE,QAAQ,OAAoC,EAAvBqE,EAAOrE,QAAQ,MACjDgF,EAAI,8BACRA,GAAK/G,EAAKT,mBACVwH,GAAK,+BACLA,IAAMD,EAAI,IAAMV,EAAS,IAAMA,GAAU,iCACzCD,EAAkB,UAAEpG,KAAM,IAAIiH,SAASD,EAAb,OAItC/F,EAAOjB,KAAKoG,MAGbnF,GAGH7B,EAAAG,UAAA2H,kCAAyBpG,GAC7B,IAAIG,EAAS,GAgBb,OAfAH,EAAKgB,MAAM,KAAKhC,IACZ,SAACC,GACG,IAAMoH,EAASpH,EAAKiC,QAAQ,KAC5B,GAAc,GAAVmF,EAAa,CACb,IAAIjG,EAAI,GACM,EAATiG,IACDjG,GAAKnB,EAAK+D,UAAU,EAAGqD,IAE3BjG,GAAKnB,EAAK+D,UAAUqD,GAAQb,QAAQ,MAAM,KAC1CrF,EAAOjB,KAAKkB,QAEZD,EAAOjB,KAAKD,KAIjBkB,EAAOyC,KAAK,MAEftE,EAAAG,UAAA6H,0BAAiBtG,OACjBG,SACJ,GAAIH,aAAgBlB,MAChBqB,EAAS,GACTH,EAAKhB,IACD,SAAC6D,GACG,IAAMzC,EAAIjB,EAAKiH,yBAAyBvD,GACxC1C,EAAOjB,KAAKC,EAAK+F,eAAe9E,UAGrC,CACH,IAAMA,EAAI5B,KAAK4H,yBAAyBpG,GACxCG,EAAS3B,KAAK0G,eAAe9E,GAEjC,OAAOD,GASH7B,EAAAG,UAAAoB,mBAAUJ,GACd,IACI,IAAI8G,EAAM,GACV,GAAI9G,EAAI+G,WAEJ,IADA,IAAMC,EAAIhH,EAAI+G,WACL3D,EAAI,EAAGA,EAAI4D,EAAElH,OAAQsD,IAAK,CACnC,IAAM6D,EAAOD,EAAE5D,GACf0D,EAAIG,EAAKC,MAAQD,EAAK9H,MAG1B,GAAIa,EAAImH,YAAcnH,EAAImH,WAAWrH,OACjC,IAASsD,EAAI,EAAGA,EAAIpD,EAAImH,WAAWrH,OAAQsD,IAAK,CAC5C,IAAM5D,EAAOQ,EAAImH,WAAW/D,GACtBgE,EAAW5H,EAAK4H,SAEtB,GAAIN,EAAIM,KAAc/F,UAAW,EACvBgG,EAAWtI,KAAKqB,UAAUZ,MAEhCsH,EAAIM,GAAYC,OAEb,CACH,GAAIP,EAAIM,GAAU3H,OAAS4B,UAAW,CAClC,IAAMiG,EAAMR,EAAIM,GAEhBN,EAAIM,GAAY,GAChBN,EAAIM,GAAU3H,KAAK6H,GAEvB,IAAMD,GAAAA,EAAWtI,KAAKqB,UAAUZ,KAE5BsH,EAAIM,GAAU3H,KAAK4H,QAI5B,CACH,IAAME,EAAOvH,EAAIwH,YAAYvB,OAAOF,QAAQ,qBAAsB,IAClEe,EAAMS,EAAKzH,OAASyH,EAAOlG,UAE/B,OAAOyF,EACT,MAAOzG,GACDtB,KAAKgG,YACLC,QAAQC,IAAI5E,EAAEkF,WAoB1B1G,EAAAG,UAAAyI,YAAA,SAAYC,GACR,IAAMC,EAAQD,EAAWnH,gBAAgBlB,MAAUqI,EAAWnH,KAAKT,OAAS,EAEtE8H,EAAY,IAAItD,EAAAA,gBAAqB,MAc3C,OAZAvF,KAAKwF,gBACDqD,EAJc,CAACvD,YAAa,GAAI3D,OAAQ,IAMxC,CACIH,KAAMmH,EAAWnH,KACjBiE,KAAIkD,EAAWlD,MACfpF,QAASsI,EAAWtI,QACpB+D,KAAMuE,EAAWvE,KACjBsB,QAASiD,EAAWjD,QACpBC,WAAYiD,IAGbC,GASX/I,EAAAG,UAAA6I,YAAA,SACInC,EACAjF,GAFJ,IAAAf,EAAAX,KAGU+I,EAAc,GACpBpC,EAAKnG,IAAK,SAACC,GACHsI,EAAYtI,EAAKgF,SAAQnD,YACzByG,EAAYtI,EAAKgF,OAAM,IAE3BsD,EAAYtI,EAAKgF,OAAI/E,KAAK,CAACc,KAAMf,EAAKe,KAAMnB,QAASI,EAAKJ,YAE9D,IAAMwI,EAAY,IAAItD,EAAAA,gBAAqB,MAc3C,OAZA1E,OAAOC,KAAKiI,GAAavI,IAAM,SAACuC,GAC5BpC,EAAKyF,OAAO2C,EAAYhG,GAAKvB,KAAMuB,EAAKgG,EAAYhG,GAAK1C,QAASqB,GAAQkE,UACtE,SAACnE,GACOA,GACAoH,EAAUzD,KAAK3D,IAGvB,SAACsE,GACG8C,EAAU9C,MAAMA,OAIrB8C,GAYX/I,EAAAG,UAAAmG,OAAA,SACI5E,EACAwH,EACA3I,EACAqB,GAJJ,IAAAf,EAAAX,KAMU6I,EAAY,IAAItD,EAAAA,gBAAqB,MAoC3C,OAlCAvF,KAAK8C,KAAKkG,GAAMpD,UACZ,SAACnE,GACG,IAAIE,EACEsH,EAAQtI,EAAKmH,iBAAiBtG,GAE/BE,IACDA,EAAS,SAACI,EAAWN,EAAcpB,GAAe,OAAAA,IAElDoB,aAAgBlB,OAChBqB,EAAS,GACTsH,EAAMzI,IAAI,SAAC0I,GACP,IAAMC,EAAIxI,EAAKY,iBAAiB2H,EAAUzH,EAAMpB,EAASqB,GACzD,GAAIyH,EAAG,CACH,IAAIlH,EAAMtB,EAAKsD,kBAAkBiF,GACjCvH,EAAOM,GAAOkH,KAGa,IAA/BtI,OAAOC,KAAKa,GAAQZ,SACpBY,EAASW,YAEU,iBAATd,IACdG,EAAShB,EAAKY,iBAAiB0H,EAAOxH,EAAMpB,EAASqB,IAErDC,EACAkH,EAAUzD,KAAKzD,GAGfkH,EAAU9C,MAAM,wBAA0BvE,IAGlD,SAACuE,GACG8C,EAAU9C,MAAMA,KAGjB8C,uBA50BdO,EAAAA,sDAdOC,EAAAA,gBADR,GCrCAC,EAAA,WA0CE,SAAAA,EAAoBC,GAAAvJ,KAAAuJ,aAAAA,SA1BpB1I,OAAA2I,eACIF,EAAArJ,UAAA,YAAS,KADb,SACcwB,GADd,IAAAd,EAAAX,KAEEA,KAAKyJ,MAAQhI,EACTzB,KAAKyJ,OACPzJ,KAAK0J,qBAAuB1J,KAAKyJ,MAAMhE,MAAGjB,UAAUxE,KAAKyJ,MAAMhE,MAAGvC,YAAY,MAC9ElD,KAAKuJ,aAAab,YAAY,CAC5BjD,KAAIzF,KAAKyJ,MAAMhE,MACfjE,KAAM,KACLoE,UACD,SAAC+D,GACIA,IACDhJ,EAAKkF,OAAS8D,EACdhJ,EAAKc,KAAOa,YAGhB,SAACyD,GACCpF,EAAKkF,OAASE,EACdpF,EAAKc,KAAOa,cAIhBtC,KAAKyB,KAAOa,UACZtC,KAAK6F,OAASvD,4CAOVgH,EAAArJ,UAAA2J,wBAAetD,cACjBA,aAAmBhG,MACrBgG,EAAQ9F,IACN,SAACC,GACCE,EAAKiJ,eAAenJ,KAGI,iBAAZ6F,GAChBzF,OAAOC,KAAKwF,GAAS9F,IACnB,SAACyB,GACa,YAARA,EACFqE,EAAQrE,GAAO,IAAI0F,SAAS,kBAAoBrB,EAAQrE,GAAzC,GAEftB,EAAKiJ,eAAetD,EAAQrE,OAOtCqH,EAAArJ,UAAA4J,aAAA,SAAarB,GAAb,IAAA7H,EAAAX,KACE,IACE,IAAMsG,EAAUxC,KAAKC,MAAMyE,EAAKpI,OAChCJ,KAAK4J,eAAetD,GAChBA,aAAmBhG,MACrBN,KAAKuJ,aAAaT,YAAYxC,GAASV,UACrC,SAAC+D,GACIA,IACDhJ,EAAKc,KAAOkI,IAGhB,SAAC5D,GACCpF,EAAKc,KAAO,CAACqI,MAAO/D,KAIxB/F,KAAKuJ,aAAab,YAAYpC,GAASV,UACrC,SAAC+D,GACIA,IACDhJ,EAAKc,KAAOkI,IAGhB,SAAC5D,GACCpF,EAAKc,KAAO,CAACqI,MAAO/D,KAI3B,MAAOgE,GACN/J,KAAKyB,KAAO,CAACqI,MAAOC,EAAIvD,+BAzF7BwD,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,eACVC,SAAA,k5CAJOrK,wCAcNsK,EAAAA,WAhBH,GCAAC,EAAA,WAsDI,SAAAA,EAAoBd,GAAAvJ,KAAAuJ,aAAAA,qBArCe,IAAIe,EAAAA,+BAGL,IAAIA,EAAAA,oBAEtCzJ,OAAA2I,eACIa,EAAApK,UAAA,cAAW,KADf,SACgBsK,GADhB,IAAA5J,EAAAX,KAEIA,KAAKyJ,MAAQc,EACTvK,KAAKyJ,MACDzJ,KAAKyJ,iBAAiBnJ,MACtBN,KAAKuJ,aAAaT,YAAY9I,KAAKyJ,OAAO7D,UACtC,SAAC+D,GACMA,GACChJ,EAAK6J,cAAcC,KAAKd,IAGhC,SAAC5D,GACGpF,EAAK6J,cAAcC,KAAK,CAACX,MAAO/D,MAIxC/F,KAAKuJ,aAAab,YAAY1I,KAAKyJ,OAAO7D,UACtC,SAAC+D,GACMA,GACChJ,EAAK6J,cAAcC,KAAKd,IAGhC,SAAC5D,GACGpF,EAAK6J,cAAcC,KAAK,CAACX,MAAO/D,MAK5C/F,KAAKwK,cAAcC,KAAKnI,gEAzCnCoI,EAAAA,UAAST,KAAA,CAAC,CACPC,SAAU,6DAHLpK,4CASJ6K,EAAAA,6BAGAA,EAAAA,4BAGAP,EAAAA,WAtBL,GCAAQ,EAAA,oDASCC,EAAAA,SAAQZ,KAAA,CAAC,CACRa,aAAc,CACZxB,EACAe,GAEFU,QAAS,CACPzB,EACAe,GAEFW,QAAS,CACPC,EAAAA,aACAC,EAAAA,kBAEFC,UAAW,CACTrL,GAEFsL,QAAS,CAACC,EAAAA,8BAzBZ","sourcesContent":["/*\n* Query service provides a way to query a remote JSON or XML file. It can be used in following ways.\n*\n* 1) With select() method, a single path or a list of paths can be given. each path will be a json qualifying\n* path to an end node (i.e., 'books.book.title'). If multiple paths are supplied, query result will be a json\n* object where each attribute will be a given query path and its value will be query result for that path.\n* For example:\n* select(['books.book.title', 'books.book.author'], '/example1.xml', false)\n* will result in {'books.book.title': [], 'books.book.author': []}.\n* Each result will not co-related with other result in order or in any other form. if a clause argument is\n* supplied, it will be invoked to further assist in filtering the query result. for example if certain category\n* of books are required, the clause function can look for a book category attribute and return the query result\n* if acceptable or undefined if result should be filtered out of the result.\n*\n* 2) With arraySelect() method, an array of {path: '', in:'', deepXml: true} can be supplied, each entry will be evaluated\n* as if select() method is invoked. But first, requests with similar paths will be merged into one call.  This\n* method is useful when paths are dynamicly given and it is not clear in advance if there are requests with\n* similar paths. deepXml attribute is optional.\n*\n* 3) With chainSelect() method, a chained set of {path: '', in: '', deepXml: true} is given in a json object. When result of\n* a query becomes available, the request json will be examined to see if a request for the key is available. If\n* so, then the 'in' for the path will be prepended to the resulting value of the previous query. , deepXml attribute is \n* optional. This method is useful when result of a query is a json or an xml file and additional query is needed \n* further down in the preceeding files. For example the assumption in the following call is that each books.book \n* result will be a file name and the file path for each result is '/samples/books/'.\n* chainSelect({\n*   path: 'books.book',\n*   in: 'sample1.xml',\n*   deepXml: true,\n*   'books.book': {\n*       in: '/samples/books/',\n*       path: ['publication.title', 'publication.author'],\n*       handler: this.bublicationHandler\n*   })\n* if a handler is supplied, it will be used to filter out any result that is not acceptable.\n*\n*/\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nimport {map} from 'rxjs/operators';\nimport {BehaviorSubject} from 'rxjs';\nimport * as xmldom from 'xmldom';\n\n/*\n* @param node The parent node. it can be used to evaluate based on other attributes in the node.\n* @param path attribute to be examined.\n* @param value the value of the path. it could be undefined, a literal, or a list.\n* @returns returns the value or filtered version of the value or undefined otherwise.\n*/\nexport type clauseEvaluator = (node: any, path: string, value: any) => any;\n\n@Injectable()\nexport class WizardQueryService {\n\n    public SERVICE_PATH = '';\n    public logEnabled = false;\n\n    constructor(\n      private http: HttpClient\n    ) {\n\n    }\n\n    private _globalFunctions() {\n        return \"function reverse(a) {\\n\"+\n            \" if (a instanceof Array) {\\n\"+\n            \"  return a.reverse();\\n\"+\n            \" \\n} else if (typeof a === 'string') {\\n\"+\n            \"  return a.split('').reverse().join('');\\n\"+\n            \" } else return a;\\n\"+\n            \"}\\n\"+\n            \"function sum(a,b) {\\n\"+\n            \" var total = 0;\\n\" +\n            \" if (a instanceof Array) { \\n\"+\n            \"  a.map(function(k) {total += sum(k, b);});\\n\"+\n            \" } else if (typeof a === 'object') {\\n\"+\n            \"   if (b.indexOf('.')>0){\\n\" +\n            \"     var t = a; b.split('.').map(function(k){total+=sum(t[k],b.substring(k.length+1))});\" +\n            \"   } else if(a[b]) {\\n\"+\n            \"     var t = a[b];\\n\"+\n            \"     total += (typeof t === 'number') ? t : parseFloat(t);\\n\"+\n            \"   } \\n\"+\n            \" } \\n\"+\n            \" return total;\\n\" +\n            \"}\\n\"+\n            \"function count(a,b) {\\n\"+\n            \" var total = 0;\\n\" +\n            \" if (a instanceof Array) { \\n\"+\n            \"  a.map(function(k) {total += count(k, b);});\\n\"+\n            \" } else if (typeof a === 'object') {\\n\"+\n            \"  Object.keys(a).map(function(k){ total += count(a[k],b);});\\n\"+\n            \" } else if (typeof a === 'string') {\\n\"+\n            \"   total = a.split(b).length - 1;\\n\"+\n            \" } else if (a === b) {total++;}\\n\"+\n            \" return total;\\n\" +\n            \"}\\n\";\n    }\n\n    /*\n    * Will normalize the given xml out of additional #text or #cdata-section nodes.\n    * @param value the xml to be normailzed.\n    * @param deepXml if cdata-section should be parsed.\n    * @return normalized xml.\n    */\n    private _normalize(value: any, deepXml: boolean) {\n        if (value instanceof Array) {\n            const result = [];\n            value.map( (item) => {\n                result.push(this._normalize(item, deepXml));\n            });\n            value = result;\n        } else if (typeof value === 'object') {\n            let items: any = Object.keys(value);\n\n            if (items.length === 1 && !(value[items[0]] instanceof Array)) {\n                if (value['#text']) {\n                    value = value['#text'];\n                } else if (value['#cdata-section']) {\n                    value = value['#cdata-section'];\n                    if (deepXml) {\n                        try {\n                            const xml = new xmldom.DOMParser().parseFromString(value);\n                            value = (xml.documentElement && xml.documentElement != null) ?\n                                        this._xml2json(xml.documentElement) :\n                                        value;\n                        }catch(e){\n                        }\n                    }\n                }\n            } else {\n                const result = {};\n                items.map( (item) => {\n                    result[item] = this._normalize(value[item], deepXml);\n                });\n                value = result;\n            }\n        }\n        return value;\n    }\n\n    /*\n    * @param path JSON path to evaluate. A path could be fully qualified for depth of json (i.e., 'a.b.c')\n    * @param data the data source.\n    * @param deepXml if cdata-section should be parsed.\n    * @param clause A method by which value(s) for the key(s) could be evaluated. the caller would evaluate the value for a given attribute.\n    * @returns returns evluated value for the key in data source.\n    */\n    private _valueOfJsonPath(\n        path: any,\n        data: any,\n        deepXml: boolean,\n        clause?: clauseEvaluator): any {\n\n        let result: any;\n        let x = this._normalize(data, deepXml);\n        path.map( (subkey: any) => {\n            let node = x;\n            if (node && node instanceof Array) {\n                const t = [];\n                if (subkey.sort) {\n                    node = subkey.sort(node);\n                }\n                node.map (\n                    (item) => {\n                        if (typeof item === 'object') {\n                            if (subkey.key.length) {\n                                x = subkey.key.length ? item[subkey.key] : item;\n                                if (x && subkey.validated) {\n                                    let r = true;\n                                    subkey.validated.map(v => {\n                                        const z = v(x);\n                                        if (typeof z === 'boolean') {\n                                            if(z  == false) {\n                                                r = false;\n                                            }\n                                        } else {\n                                            x = z;\n                                        }\n                                    });\n                                    if (r) {\n                                        t.push(x);\n                                    } else {\n                                        x = undefined;\n                                    }\n                                }\n                            } else {\n                                if (subkey.validated) {\n                                    let r = true;\n                                    subkey.validated.map(v => {\n                                        const z = v(item);\n                                        if (typeof z === 'boolean') {\n                                            if(z  == false) {\n                                                r = false;\n                                            }\n                                        } else {\n                                            item = z;\n                                        }\n                                    });\n                                    if (r) {\n                                        t.push(item);\n                                    } else {\n                                        x = undefined;\n                                    }\n                                } else {\n                                    t.push(item);\n                                }\n                            }\n                        } else if (subkey.key.length && (typeof item === 'string')) {\n                            item.split('.').map(\n                                (str) => {\n                                    if (str.indexOf(subkey.key) >= 0) {\n                                        t.push(str);\n                                    }\n                                }\n                            )\n                        }\n                    }\n                );\n                x = t;\n                result = x;\n            } else if (node && (typeof node === 'object')) {\n                x = x ?\n                    clause(node, subkey.key, subkey.key.length ? x[subkey.key]:  x) :\n                    undefined;\n                if (x && x instanceof Array) {\n                    const t = [];\n                    if (subkey.sort) {\n                        x = subkey.sort(x);\n                    }\n                    x.map(\n                        (item: any) => {\n                            if (subkey.validated) {\n                                let r = true;\n                                subkey.validated.map(v => {\n                                    const z = v(item);\n                                    if (typeof z === 'boolean') {\n                                        if(z  == false) {\n                                            r = false;\n                                        }\n                                    } else {\n                                        item = z;\n                                    }\n                                });\n                                if (r) {\n                                    t.push(item);\n                                } else {\n                                    x = undefined;\n                                }\n                            }\n                        }\n                    );\n                    x = t;\n                    result = x;\n                } else if (x) {\n                    if (subkey.validated) {\n                        let r = true;\n                        subkey.validated.map(v => {\n                            const z = v(x);\n                            if (typeof z === 'boolean') {\n                                if(z  == false) {\n                                    r = false;\n                                }\n                            } else {\n                                x = z;\n                            }\n                        });\n                        if (r) {\n                            result = x;\n                        } else {\n                            x = undefined;\n                        }\n                    } else {\n                        result = x;\n                    }\n                }\n            } else if (node && (typeof node === 'string') && subkey.key.length) {\n                result = [];\n                node.split('.').map(\n                    (item) => {\n                        if (item.indexOf(subkey.key) >= 0) {\n                            result.push(item);\n                        }\n                    }\n                )\n            } else {\n                result = node;\n            }\n        });\n        return result;\n    }\n\n    private _get(path: string) {\n        const url = this.SERVICE_PATH + path;\n        const dot = path.lastIndexOf('.');\n        const ext = dot < 0 ? undefined : path.toLowerCase().substr(dot);\n        const headers = new HttpHeaders();\n        let result: any;\n\n        headers.set('Access-Control-Allow-Origin', '*');\n\n        if (ext === '.xml') {\n            headers.set('Content-Type', 'text; charset=utf-8').set('Accept', 'text');\n            result = this.http.get(url, { headers, responseType: 'text' })\n                .pipe(map((res) => {\n                    const xml = new xmldom.DOMParser().parseFromString(res);\n                    const json = this._xml2json(xml.documentElement);\n                    return json;\n                })\n            );\n        } else if (ext === '.txt') {\n            headers.set('Content-Type', 'text; charset=utf-8').set('Accept', 'text');\n            result = this.http.get(url, { headers, responseType: 'text' }).pipe(map((res) => res));\n        } else if (ext === '.json'){\n            headers.set('Content-Type', 'json; charset=utf-8').set('Accept', 'json');\n            result = this.http.get(url, {headers}).pipe(map((res) => res));\n        } else {\n            headers.set('Content-Type', 'text; charset=utf-8').set('Accept', 'text');\n            result = this.http.get(url, { headers, responseType: 'text' })\n                .pipe(map((res) => {\n                    let parsed: any;\n                    try {\n                        parsed = JSON.parse(res);\n                    }catch (e) {\n                        try {\n                            const xml = new xmldom.DOMParser().parseFromString(res);\n                            parsed = this._xml2json(xml.documentElement);\n                        } catch (e2) {\n                            parsed = res;\n                        }\n                    };\n                    return parsed ? parsed : res;\n                })\n            );\n        }\n        return result;\n    }\n\n    private _stringValueOfKey(key: any) {\n        const result = [];\n\n        if (key instanceof Array) {\n            key.map( \n                (item: any) => {\n                    if (item instanceof Array) {\n                        let x = [];\n                        item.map(\n                            (subitem) => {\n                                if (subitem.key.length) {\n                                    x.push(subitem.key);\n                                }\n                            }\n                        )\n                        result.push(x.join('.'));\n                    } else if (typeof item === 'string') {\n                        const i = item.indexOf('[');\n                        const j = item.indexOf(']');\n                        const k = item.length > (j + 1) ? 2 : 1;\n                        result.push(i > 0 ? item.substring(0,i) : j > 0 ? item.substring(j + k) : item);\n                    } else if (item.key.length) {\n                        result.push(item.key);\n                    }\n                }\n            )\n        } else {\n            result.push(key.key)\n        }\n        return result.join(',');\n    }\n\n    private _addToResult(value: any, key: string, operation: any, action: any) {\n        const path = this._stringValueOfKey(action.path);\n        const key2 = this._stringValueOfKey(key);\n        let op = operation.result[path];\n        let complete = false;\n    \n        if (!op) {\n            operation.result[path] = {};\n        }\n        if (op) {\n            let opk = op[key2];\n            if (operation['temp'] &&\n                operation['temp'][key2]) {\n                op[key2] = [op[key2]];\n                delete operation['temp'];\n            }else if (opk && (opk instanceof Array) === false) {\n                operation.result[path][key2] = [opk]\n                op = operation.result[path];\n            }\n            value = this._normalize(value, action.deepXml);\n            if (op[key2]) {\n                op[key2].push( value[key2] ? value[key2] : value );\n            } else {\n                if ((op instanceof Array) === false) {\n                    operation.result[path] = [op];\n                    operation.result[path].push( value[key2] ? value[key2] : value );\n                } else {\n                    op.push( value[key2] ? value[key2] : value );\n                }\n            }\n        } else {\n            if (value instanceof Array) {\n                // if already an array remember it.\n                if (!operation['temp']) {\n                    operation['temp'] = {};\n                }\n                if (!operation['temp'][key2]) {\n                    operation['temp'][key2] = true;\n                }\n            }\n            operation.result[path][key2] = this._normalize(value, action.deepXml);\n            complete = true;\n        }\n        return complete;\n    }\n\n    private _pack(result: any) {\n        if (result instanceof Array) {\n            const list = [];\n            result.map(\n                (item) => {\n                    list.push(this._pack(item));\n                }\n            );\n            result = list;\n        } else if (typeof result === 'object') {\n            const keys = Object.keys(result);\n            keys.map (\n                (key) => {\n                    const item = result[key];\n                    if (item instanceof Array) {\n\n                    } else if (item[key]) {\n                        result[key] = item[key];\n                    }\n                }\n            )\n        }\n        return result;\n    }\n\n    private _triggerResult(promise: any, result: any) {\n        promise.next(this._pack(result));\n    }\n\n    private _subquery(\n        promise: any,\n        path: any,\n        operation: any,\n        action: any) {\n\n        if (operation.cachedFiles[path] === undefined) {\n            // one of the keys at this level could be referencing the same file which\n            // is not yet fetched. need to wait till it is available.\n            operation.cachedFiles[path] = new BehaviorSubject<any>(null);\n            this._queryIteration(\n                operation.cachedFiles[path],\n                operation,\n                {\n                    path: action.path,\n                    in: action.in,\n                    deepXml: action.deepXml,\n                    join: action.join,\n                    handler: action.handler,\n                    queryItems: (action.path instanceof Array) ? action.path.length : 1\n                },\n                path\n            );\n        }\n\n        // wait for result raised above.\n        operation.cachedFiles[path].subscribe(\n            (source: any) => {\n                if (source) {\n                    const opkeyi = action.join ? action.join[action.path] : undefined;\n                    if (opkeyi) {\n                        if (source instanceof Array) {\n                            source.map(\n                                (item) => {\n                                    this._subquery(\n                                        promise,\n                                        item,\n                                        operation,\n                                        {\n                                            path: opkeyi.path,\n                                            in: opkeyi.in + item,\n                                            deepXml: opkeyi.deepXml,\n                                            join: opkeyi.join,\n                                            handler: opkeyi.handler,\n                                            queryItems: (opkeyi.path instanceof Array) ? opkeyi.path.length : 1\n                                        }\n                                    );\n                                }\n                            )\n                        } else {\n                            this._subquery(\n                                promise,\n                                source,\n                                operation,\n                                {\n                                    path: action.join[opkeyi.path],\n                                    in: opkeyi.in + source,\n                                    deepXml: action.deepXml,\n                                    join: opkeyi.join,\n                                    handler: opkeyi.handler,\n                                    queryItems: (opkeyi.path instanceof Array) ? opkeyi.path.length : 1\n                                }\n                            );\n                        }\n                    } else if (this._addToResult(source, action.path, operation, action)) {\n                        action.queryItems--;\n                        if (action.queryItems === 0) {\n                            this._triggerResult(promise, operation.result);\n                        }\n                    }else {\n                        action.queryItems--;\n                        this._triggerResult(promise, operation.result);\n                    }\n                }\n            },\n            (error: any) => {\n                if (this.logEnabled) {\n                    console.log(error);\n                }\n                action.queryItems--;\n                this._triggerResult(promise, operation.result);\n           }\n        );\n    }\n    /*\n    * Iterates through a chain query.\n    * @param promise The promise which original caller is waiting for.\n    * @param operation data for keeping track of the iteration.\n    * @param action contains: {path: current keys to query for, in: current query path, handler: resolver method}.\n    * @param cacheNamed The cached name from previous iteration if any.\n    * @returns returns none.\n    */\n    private _queryIteration(\n        promise: BehaviorSubject<any>,\n        operation: any,\n        action: any,\n        cacheNamed?: string) {\n\n        if (!action.handler) {\n            action.handler = (node: any, path: string, value: any) => value;\n        }\n        this.select(action.path, action.in, action.deepXml, action.handler).subscribe(\n            (data) => {\n                if (data) {\n                    if (cacheNamed) {\n                        // result of n-th level call to be placed on previous level cache reference.\n                        operation.cachedFiles[cacheNamed].next(data);\n                    } else {\n                        if (data instanceof Array) {\n                            const operationalKey = action.join ? action.join[action.path] : undefined;\n                            if (operationalKey) {\n                                // assumption is the resulting list is a list of file paths.\n                                data.map( (content) => {\n                                    const path = content['#text'] ? content['#text'] : content;\n                                    this._subquery(promise, path, operation, {\n                                        path: operationalKey.path,\n                                        in: operationalKey.in + content,\n                                        deepXml: operationalKey.deepXml,\n                                        join: operationalKey.join,\n                                        handler: operationalKey.handler,\n                                        queryItems: (operationalKey.path instanceof Array) ? operationalKey.path.length : 1\n                                    });\n                                });\n                            } else {\n                                // no more query in the chain.\n                                action.queryItems--;\n                                if (action.queryItems === 0) {\n                                    const result =operation.result ? operation.result : {};\n                                    this._triggerResult(promise, Object.keys(operation.result).length ? operation.result : data);\n                                }\n                            }\n                        } else if (typeof data === 'object') {\n                            Object.keys(data).map( (key) => {\n                                const content = data[key];\n                                const operationalKey = action.join ? action.join[key]: undefined;\n    \n                                if (content && content.length && operationalKey) {\n                                    this._subquery(\n                                        promise,\n                                        content,\n                                        operation,\n                                        {\n                                            path: operationalKey.path,\n                                            in: operationalKey.in + content,\n                                            deepXml: operationalKey.deepXml,\n                                            handler: operationalKey.handler,\n                                            queryItems: (operationalKey.path instanceof Array) ? operationalKey.path.length : 1\n                                        }\n                                    );\n                                } else {\n                                    action.queryItems--;\n                                    if (content) {\n                                        if (!operation.result) {\n                                            operation.result = {};\n                                        }\n                                        if (operation.result instanceof Array) {\n                                            operation.result.push(content);\n                                        } else {\n                                            operation.result[key] = content;\n                                        }\n                                    }\n                                    if (action.queryItems === 0) {\n                                        this._triggerResult(promise, Object.keys(operation.result).length ? operation.result : data);\n                                    }\n                                }\n                            });\n                        } else {\n                            action.queryItems--;\n                            if (action.queryItems === 0) {\n                                if (Object.keys(operation.result).length === 0 && data !== undefined) {\n                                    operation.result = data;\n                                }\n                            }\n                            this._triggerResult(promise, operation.result);\n                        }\n                    }\n                }\n            },\n            (error: any) => {\n                promise.error({\n                    message: 'failed to query ' + action.path,\n                    reason: error.message ? error.message : error\n                });\n                action.queryItems--;\n                if (action.queryItems === 0) {\n                    this._triggerResult(promise, operation.result);\n                }\n            }\n        );\n    }\n\n    private _makeArguments(key: string) {\n        const list = key.split('.');\n        const result = [];\n        list.map( (item) => {\n            const b = item.indexOf('[');\n            if (b < 0) {\n                result.push({\n                    key: item,\n                    validated: [(data) => true]\n                });\n            } else {\n                let str = item.substring(b + 1, item.length - 1);\n                const vList = str.split('][');\n                const object = {\n                    key: item.substring(0,b),\n                    validated: [(data) => true]\n                };\n                vList.map( \n                    (filter) => {\n                        filter = filter.replace(/\\`/g, '.');\n                        filter = filter.replace(/\\@/g, 'data');\n                        if (filter.indexOf('order-by:') > -1) {\n                            const arg: any = filter.substring(filter.indexOf('order-by:') + 10).trim();\n                            const arglist = arg.split('~');\n                            const key = arglist[0].trim();\n                            const order= arglist[1] ? arglist[1].trim().toLowerCase(): 'asc';\n                            object['sort'] = function (array: any) {\n                                const _valueOf = (key: string, p: any) => {\n                                    key.split('.').map( (x) => {p = p[x]});\n                                    return p;\n                                }\n                                return array.sort(\n                                    function(a: any,b: any){\n                                        const flag =_valueOf(key, a) > _valueOf(key, b);\n                                        return flag ? (order === 'asc' ? 1: -1) : (order === 'asc' ? -1: 1);\n                                    }\n                                );\n                            }\n                        }else {\n                            const t = filter.indexOf('&&') > 0 || filter.indexOf('||') > 0;\n                            let f = 'return function (data) { \\n';\n                            f += this._globalFunctions();\n                            f += 'var x = false;\\n try{\\n x = ';\n                            f += (t ? '(' + filter + ')' : filter) + '; \\n}catch(e){}\\n return x;\\n}';\n                            object['validated'].push( new Function(f)() );\n                        }\n                    }\n                );\n                result.push(object);\n            }\n        });\n        return result;\n    }\n\n    private _handleSpecialCharacters(path: string) {\n        let result = [];\n        path.split(']').map(\n            (item) => {\n                const bindex = item.indexOf('[');\n                if (bindex >= 0) {\n                    let x = '';\n                    if ( bindex > 0) {\n                        x += item.substring(0, bindex);\n                    }\n                    x += item.substring(bindex).replace(/\\./g,'`');\n                    result.push(x);\n                } else {\n                    result.push(item);\n                }\n            }\n        );\n        return result.join(']');\n    }\n    private _prepareJsonPath(path: any) {\n        let result: any;\n        if (path instanceof Array) {\n            result = [];\n            path.map(\n                (i) => {\n                    const x = this._handleSpecialCharacters(i);\n                    result.push(this._makeArguments(x));\n                }\n            );\n        } else {\n            const x = this._handleSpecialCharacters(path);\n            result = this._makeArguments(x);\n        }\n        return result;\n    }\n    \n\n    /*\n    * Will convert the xml into a json.\n    * @param xml XML to be converted.\n    * @returns returns converted JSON.\n    */\n    private _xml2json(xml: any) {\n        try {\n            let obj = {};\n            if (xml.attributes) {\n                const c = xml.attributes;\n                for (let i = 0; i < c.length; i++) {\n                const attr = c[i];\n                obj[attr.name] = attr.value;\n                }\n            }\n            if (xml.childNodes && xml.childNodes.length) {\n                for (let i = 0; i < xml.childNodes.length; i++) {\n                    const item = xml.childNodes[i];\n                    const nodeName = item.nodeName;\n\n                    if (obj[nodeName] === undefined) {\n                        const fragment = this._xml2json(item);\n                        if (fragment) {\n                        obj[nodeName] = fragment;\n                        }\n                    } else {\n                        if (obj[nodeName].push === undefined) {\n                            const old = obj[nodeName];\n\n                            obj[nodeName] = [];\n                            obj[nodeName].push(old);\n                        }\n                        const fragment = this._xml2json(item);\n                        if (fragment) {\n                            obj[nodeName].push(fragment);\n                        }\n                    }\n                }\n            } else {\n                const text = xml.textContent.trim().replace(/(?:\\r\\n|\\r|\\n|\\t)/g, '');\n                obj = text.length ? text : undefined;\n            }\n            return obj;\n        } catch (e) {\n            if (this.logEnabled) {\n                console.log(e.message);\n            }\n        }\n    }\n\n    /*\n    * Will do a chain query on specified paths from remote location.\n    * @param chainQuery A Json structure with paths. Each path will contain a chain of instructions.\n    * Each instruction will have a 'in' to a file and a path to search on it (see. select()). once the\n    * result is in, the next instruction in the path chain will be trigged. After the path through all\n    * chained paths is completed, resulting value will be put in a json where its path is the original\n    * json path and its value will be the resulting value.\n    *\n    * this is not fully tested. caller should pass something like\n    * {path: [path1,path2], in: 'something or blank', deepXml: true, join: {k1: {path: path3, in: 'something or plank', clause: function}}}\n    * if path1 or path2 or path3 are found at the root object, a chain reaction to fetch deep will follow. An\n    * optional clause will help resolve complex situations.\n    *\n    * @returns returns an observable. the caller should subscribe to this in order to receive the result.\n    */\n    chainSelect(chainQuery: any): BehaviorSubject<any> {\n        const size = (chainQuery.path instanceof Array) ?  chainQuery.path.length : 1;\n        const operation = {cachedFiles: {}, result: {}};\n        const dataStore = new BehaviorSubject<any>(null);\n\n        this._queryIteration(\n            dataStore,\n            operation,\n            {\n                path: chainQuery.path,\n                in: chainQuery.in,\n                deepXml: chainQuery.deepXml,\n                join: chainQuery.join,\n                handler: chainQuery.handler,\n                queryItems: size\n            }\n        );\n        return dataStore;\n    }\n\n    /*\n    * Will group file paths if they are similar to avoid multiple calls.\n    * @param list A list of Json {paths, in, deepXml} structures. deepXml is optional.\n    * @param clause A method by which value(s) for the path(s) could be evaluated. the caller would evaluate the value for a given attribute.\n    * @returns returns an observable. the caller should subscribe to this in order to receive the result.\n    */\n    arraySelect(\n        list: any,\n        clause?: clauseEvaluator): BehaviorSubject<any>  {\n        const groupedList = {};\n        list.map( (item: any) => {\n            if (groupedList[item.in] === undefined) {\n                groupedList[item.in] = [];\n            }\n            groupedList[item.in].push({path: item.path, deepXml: item.deepXml});\n        });\n        const dataStore = new BehaviorSubject<any>(null);\n\n        Object.keys(groupedList).map ( (url) => {\n            this.select(groupedList[url].path, url, groupedList[url].deepXml, clause).subscribe(\n                (data: any) => {\n                    if (data) {\n                        dataStore.next(data);\n                    }\n                },\n                (error: any) => {\n                    dataStore.error(error);\n                }\n            );\n        });\n        return dataStore;\n    }\n\n    /*\n    * Will query path from a remote location qualified through an optional clause function that\n    * evaluates, filters, or sorts the resul of the query.\n    * @param path A a single JSON path or list of paths to select (i.e., 'a.b.c')\n    * @param from A reference URL to a remote source.\n    * @param deepXml if cdata-section should be parsed.\n    * @param clause A method by which value(s) for the path(s) could be evaluated. the caller would evaluate the value for a given attribute.\n    * @returns returns an observable. the caller should subscribe to this in order to receive the result.\n    */\n    select(\n        path: any,\n        from: string,\n        deepXml: boolean,\n        clause?: clauseEvaluator): BehaviorSubject<any> {\n\n        const dataStore = new BehaviorSubject<any>(null);\n\n        this._get(from).subscribe(\n            (data: any) => {\n                let result: any;\n                const jpath = this._prepareJsonPath(path);\n\n                if (!clause) {\n                    clause = (node: any, path: string, value: any) => value;\n                }\n                if (path instanceof Array) {\n                    result = {};\n                    jpath.map((pathItem) => {\n                        const y = this._valueOfJsonPath(pathItem, data, deepXml, clause);\n                        if (y) {\n                            let key = this._stringValueOfKey(pathItem);\n                            result[key] = y;\n                        }\n                    });\n                    if (Object.keys(result).length === 0) {\n                        result = undefined;\n                    }\n                } else if (typeof path === 'string') {\n                    result = this._valueOfJsonPath(jpath, data, deepXml, clause);\n                }\n                if (result) {\n                    dataStore.next(result);\n\n                } else {\n                    dataStore.error('Result not found for ' + path);\n                }\n            },\n            (error: any) => {\n                dataStore.error(error);\n            }\n        );\n        return dataStore;\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { WizardQueryService } from './wizard-query.service';\n\n@Component({\n  selector: 'wizard-query',\n  templateUrl: './wizard-query.html',\n  styleUrls: ['./wizard-query.scss']\n})\nexport class WizardQueryComponent {\n  selectedDocumentName: string;\n\n  data: any;\n  source: any;\n  query: any;\n  \n  @Input()\n  set queryInfo(data: any) {\n    this.query = data;\n    if (this.query) {\n      this.selectedDocumentName = this.query.in.substring(this.query.in.lastIndexOf('/'));\n      this.queryService.chainSelect({\n        in: this.query.in,\n        path: ''\n      }).subscribe(\n        (success) => {\n          if(success) {\n            this.source = success;\n            this.data = undefined;\n          }\n        },\n        (error) => {\n          this.source = error;\n          this.data = undefined;\n        }\n      );\n    } else {\n      this.data = undefined;\n      this.source = undefined;\n    }\n  }\n\n  constructor(private queryService: WizardQueryService) {\n  }\n\n  private parseFunctions(content: any) {\n    if (content instanceof Array) {\n      content.map(\n        (item) => {\n          this.parseFunctions(item);\n        }\n      )\n    } else if (typeof content === 'object') {\n      Object.keys(content).map(\n        (key) => {\n          if (key === 'handler') {\n            content[key] = new Function('return function' + content[key])();\n          } else {\n            this.parseFunctions(content[key]);\n          }\n        }\n      );\n    }\n  }\n\n  executeQuery(text: any) {\n    try {\n      const content = JSON.parse(text.value);\n      this.parseFunctions(content)\n      if (content instanceof Array) {\n        this.queryService.arraySelect(content).subscribe(\n          (success) => {\n            if(success) {\n              this.data = success;\n            }\n          },\n          (error) => {\n            this.data = {alert: error};\n          }\n        );\n      } else {\n        this.queryService.chainSelect(content).subscribe(\n          (success) => {\n            if(success) {\n              this.data = success;\n            }\n          },\n          (error) => {\n            this.data = {alert: error};\n          }\n        );\n      }\n    }catch (err) {\n      this.data = {alert: err.message};\n    }\n  }\n}\n","import {\r\n    Directive,\r\n    Input,\r\n    Output,\r\n    EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { WizardQueryService } from './wizard-query.service';\r\n\r\n@Directive({\r\n    selector: '[wizardQuery]'\r\n})\r\nexport class WizardQueryDirective {\r\n    query: any;\r\n\r\n            \r\n    @Output()\r\n    onQueryResult: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output()\r\n    onQueryError: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input()\r\n    set wizardQuery(info: any) {\r\n        this.query = info;\r\n        if (this.query) {\r\n            if (this.query instanceof Array) {\r\n                this.queryService.arraySelect(this.query).subscribe(\r\n                    (success) => {\r\n                        if(success) {\r\n                            this.onQueryResult.emit(success);\r\n                        }\r\n                    },\r\n                    (error) => {\r\n                        this.onQueryResult.emit({alert: error});\r\n                    }\r\n                );\r\n            } else {\r\n                this.queryService.chainSelect(this.query).subscribe(\r\n                    (success) => {\r\n                        if(success) {\r\n                            this.onQueryResult.emit(success);\r\n                        }\r\n                    },\r\n                    (error) => {\r\n                        this.onQueryResult.emit({alert: error});\r\n                    }\r\n                );\r\n            }\r\n        } else {\r\n            this.onQueryResult.emit(undefined);\r\n        }\r\n    }\r\n\r\n    constructor(private queryService: WizardQueryService) {}\r\n\r\n}","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { WizardQueryComponent } from './wizard-query.component';\nimport { WizardQueryService } from './wizard-query.service';\nimport { WizardQueryDirective } from './wizard-query.directive';\n\n\n@NgModule({\n  declarations: [\n    WizardQueryComponent,\n    WizardQueryDirective\n  ],\n  exports: [\n    WizardQueryComponent,\n    WizardQueryDirective\n  ],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [\n    WizardQueryService\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class WizardQueryModule { }\n"]}