{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://@sedeh/wizard-query/src/app/wizard-query/wizard-query.service.ts","ng://@sedeh/wizard-query/src/app/wizard-query/wizard-query.component.ts","ng://@sedeh/wizard-query/src/app/wizard-query/wizard-query.directive.ts","ng://@sedeh/wizard-query/src/app/wizard-query/wizard-query.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","WizardQueryService","http","this","SERVICE_PATH","logEnabled","prototype","_globalFunctions","_normalize","value","deepXml","_this","Array","result_1","map","item","push","items","keys","result_2","xml","xmldom.DOMParser","parseFromString","documentElement","_xml2json","e","_valueOfJsonPath","path","data","as","clause","result","x","subkey","node","t_1","sort","validated","r_1","v","z","undefined","r_2","split","str","indexOf","t_2","r_3","r_4","_get","url","dot","lastIndexOf","ext","toLowerCase","substr","headers","HttpHeaders","set","get","responseType","pipe","res","parsed","JSON","parse","e2","_stringValueOfKey","x_1","subitem","join","j","k","substring","replace","_addToResult","operation","action","key2","op","complete","opk","stringify","_pack","list_1","_triggerResult","promise","saveAs","next","_subquery","cachedFiles","BehaviorSubject","_queryIteration","in","handler","queryItems","subscribe","source","opkeyi_1","error","console","log","cacheNamed","_select","operationalKey_1","content","size","operationalKey","message","reason","_makeArguments","list","b","vList","object_1","filter","arglist","trim","key_1","order_1","array","_valueOf","p","a","t","f","Function","_handleSpecialCharacters","bindex","_prepareJsonPath","from","dataStore","jpath","pathItem","y","obj","attributes","attr","name","childNodes","nodeName","fragment","old","text","textContent","chainSelect","chainQuery","arraySelect","groupedList","select","HttpClient","Injectable","WizardQueryComponent","queryService","query","selectedDocumentName","success","parseFunctions","executeQuery","alert","err","tslib_1.__decorate","Input","Component","selector","template","WizardQueryDirective","onQueryResult","EventEmitter","onQueryError","info","emit","Output","Directive","WizardQueryModule","NgModule","declarations","exports","imports","CommonModule","HttpClientModule","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*\n* Query service provides a way to query a remote JSON or XML file. It can be used in following ways.\n*\n* 1) With select() method, a single path or a list of paths can be given. each path will be a json qualifying\n* path to an end node (i.e., 'books.book.title'). If multiple paths are supplied, query result will be a json\n* object where each attribute will be a given query path and its value will be query result for that path.\n* For example:\n* select(['books.book.title', 'books.book.author'], '/example1.xml', false)\n* will result in {'books.book.title': [], 'books.book.author': []}.\n* Each result will not co-related with other result in order or in any other form. if a clause argument is\n* supplied, it will be invoked to further assist in filtering the query result. for example if certain category\n* of books are required, the clause function can look for a book category attribute and return the query result\n* if acceptable or undefined if result should be filtered out of the result.\n*\n* 2) With arraySelect() method, an array of {path: '', in:'', deepXml: true} can be supplied, each entry will be evaluated\n* as if select() method is invoked. But first, requests with similar paths will be merged into one call.  This\n* method is useful when paths are dynamicly given and it is not clear in advance if there are requests with\n* similar paths. deepXml attribute is optional.\n*\n* 3) With chainSelect() method, a chained set of {path: '', in: '', deepXml: true} is given in a json object. When result of\n* a query becomes available, the request json will be examined to see if a request for the key is available. If\n* so, then the 'in' for the path will be prepended to the resulting value of the previous query. , deepXml attribute is \n* optional. This method is useful when result of a query is a json or an xml file and additional query is needed \n* further down in the preceeding files. For example the assumption in the following call is that each books.book \n* result will be a file name and the file path for each result is '/samples/books/'.\n* chainSelect({\n*   path: 'books.book',\n*   in: 'sample1.xml',\n*   deepXml: true,\n*   'books.book': {\n*       in: '/samples/books/',\n*       path: ['publication.title', 'publication.author'],\n*       handler: this.bublicationHandler\n*   })\n* if a handler is supplied, it will be used to filter out any result that is not acceptable.\n*\n*/\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nimport {map} from 'rxjs/operators';\nimport {BehaviorSubject} from 'rxjs';\nimport * as xmldom from 'xmldom';\n\n/*\n* @param node The parent node. it can be used to evaluate based on other attributes in the node.\n* @param path attribute to be examined.\n* @param value the value of the path. it could be undefined, a literal, or a list.\n* @returns returns the value or filtered version of the value or undefined otherwise.\n*/\nexport type clauseEvaluator = (node: any, path: string, value: any) => any;\n\n@Injectable()\nexport class WizardQueryService {\n\n    public SERVICE_PATH = '';\n    public logEnabled = false;\n\n    constructor(\n      private http: HttpClient\n    ) {\n\n    }\n\n    private _globalFunctions() {\n        return `\n        function reverse(a) {\n            var result = a;\n            if (a instanceof Array) {\n                result = a.reverse();\n            } else if (typeof a === 'string') {\n                result = a.split('').reverse().join('');\n            }\n            return result;\n        }\n        function sum(a,b) {\n            var total = 0;\n            if (a instanceof Array) { \n                a.map(function(k) {\n                    total += sum(k, b);\n                });\n            } else if (typeof a === 'object') {\n                if (b.indexOf('.')>0) {\n                    var t = a;\n                    b.split('.').map(function(k){\n                        total+=sum( t[k], b.substring(k.length+1) );\n                    });\n                } else if(a[b]) {\n                    var t = a[b];\n                    total += (typeof t === 'number') ? t : parseFloat(t);\n                } \n            } else if (typeof a === 'number') {\n                total = a;\n            } \n            return total;\n        }\n        function count(a,b) {\n            var total = 0;\n            if (a instanceof Array) { \n                a.map(function(k) {\n                    total += count(k, b);\n                });\n            } else if (typeof a === 'object') {\n                Object.keys(a).map(function(k){\n                    total += count(a[k],b);\n                });\n            } else if (typeof a === 'string') {\n                total = a.split(b).length - 1;\n            } else if (a === b) {\n                total++;\n            }\n            return total;\n        }\n        function like(a, b) {\n            var result = undefined;\n            if (a instanceof Array) {\n                result = [];\n                a.map(function(k) {\n                    result.push(like(k, b));\n                });\n            } else if (typeof a === 'object') {\n                result = [];\n                Object.keys(a).map(function(k){\n                    result.push(like(a[k], b));\n                });\n            } else if (typeof a === 'string') {\n                if (a.indexOf(b) > -1) {\n                    result = a;\n                }\n            } else if (a === b) {\n                result = a;\n            }\n            return result;\n        }\n        function as(a, b) {\n            if (asList[b] === undefined) {\n                asList[b] = [a];\n            } else {\n                asList[b].push(a);\n            }\n            return a;\n        }\n        function is_in(a, b, list) {\n            var result = undefined;\n            if (b instanceof Array) { \n                result = [];\n                b.map(function(k) {\n                    result.push(is_in(k, list));\n                });\n            } else if (typeof b === 'object') {\n                result = [];\n                Object.keys(b).map(function(k) {\n                    result.push(is_in(b[k], list));\n                });\n            } else if (asList[list]){\n                asList[list].map(function(t) {\n                    if (typeof t ==='string') {\n                        if (t.indexOf(b) > -1) {\n                            result = a;\n                        }\n                    }\n                });\n            }\n            return result;\n        }\n        `;\n    }\n\n    /*\n    * Will normalize the given xml out of additional #text or #cdata-section nodes.\n    * @param value the xml to be normailzed.\n    * @param deepXml if cdata-section should be parsed.\n    * @return normalized xml.\n    */\n    private _normalize(value: any, deepXml: boolean) {\n        if (value instanceof Array) {\n            const result = [];\n            value.map( (item) => {\n                result.push(this._normalize(item, deepXml));\n            });\n            value = result;\n        } else if (typeof value === 'object') {\n            let items: any = Object.keys(value);\n\n            if (items.length === 1 && !(value[items[0]] instanceof Array)) {\n                if (value['#text']) {\n                    value = value['#text'];\n                } else if (value['#cdata-section']) {\n                    value = value['#cdata-section'];\n                    if (deepXml) {\n                        try {\n                            const xml = new xmldom.DOMParser().parseFromString(value);\n                            value = (xml.documentElement && xml.documentElement != null) ?\n                                        this._xml2json(xml.documentElement) :\n                                        value;\n                        }catch(e){\n                        }\n                    }\n                }\n            } else {\n                const result = {};\n                items.map( (item) => {\n                    result[item] = this._normalize(value[item], deepXml);\n                });\n                value = result;\n            }\n        }\n        return value;\n    }\n\n    /*\n    * @param path JSON path to evaluate. A path could be fully qualified for depth of json (i.e., 'a.b.c')\n    * @param data the data source.\n    * @param deepXml if cdata-section should be parsed.\n    * @param clause A method by which value(s) for the key(s) could be evaluated. the caller would evaluate the value for a given attribute.\n    * @returns returns evluated value for the key in data source.\n    */\n    private _valueOfJsonPath(\n        path: any,\n        data: any,\n        as: any,\n        deepXml: boolean,\n        clause?: clauseEvaluator): any {\n\n        let result: any;\n        let x = this._normalize(data, deepXml);\n        path.map( (subkey: any) => {\n            let node = x;\n            if (node && node instanceof Array) {\n                const t = [];\n                if (subkey.sort) {\n                    node = subkey.sort(node);\n                }\n                node.map (\n                    (item) => {\n                        if (typeof item === 'object') {\n                            if (subkey.key.length) {\n                                x = subkey.key.length ? item[subkey.key] : item;\n                                if (x && subkey.validated) {\n                                    let r = true;\n                                    subkey.validated.map(v => {\n                                        const z = v(x, as);\n                                        if (typeof z === 'boolean') {\n                                            if(z  == false) {\n                                                r = false;\n                                            }\n                                        } else {\n                                            x = z;\n                                        }\n                                    });\n                                    if (r && x) {\n                                        t.push(x);\n                                    } else {\n                                        x = undefined;\n                                    }\n                                }\n                            } else {\n                                if (subkey.validated) {\n                                    let r = true;\n                                    subkey.validated.map(v => {\n                                        const z = v(item, as);\n                                        if (typeof z === 'boolean') {\n                                            if(z  == false) {\n                                                r = false;\n                                            }\n                                        } else {\n                                            item = z;\n                                        }\n                                    });\n                                    if (r && item) {\n                                        t.push(item);\n                                    } else {\n                                        x = undefined;\n                                    }\n                                } else {\n                                    t.push(item);\n                                }\n                            }\n                        } else if (subkey.key.length && (typeof item === 'string')) {\n                            item.split('.').map(\n                                (str) => {\n                                    if (str.indexOf(subkey.key) >= 0) {\n                                        t.push(str);\n                                    }\n                                }\n                            )\n                        }\n                    }\n                );\n                x = t;\n                result = x;\n            } else if (node && (typeof node === 'object')) {\n                x = x ?\n                    clause(node, subkey.key, subkey.key.length ? x[subkey.key]:  x) :\n                    undefined;\n                if (x && x instanceof Array) {\n                    const t = [];\n                    if (subkey.sort) {\n                        x = subkey.sort(x);\n                    }\n                    x.map(\n                        (item: any) => {\n                            if (subkey.validated) {\n                                let r = true;\n                                subkey.validated.map(v => {\n                                    const z = v(item, as);\n                                    if (typeof z === 'boolean') {\n                                        if(z  == false) {\n                                            r = false;\n                                        }\n                                    } else {\n                                        item = z;\n                                    }\n                                });\n                                if (r && item) {\n                                    t.push(item);\n                                } else {\n                                    x = undefined;\n                                }\n                            }\n                        }\n                    );\n                    x = t;\n                    result = x;\n                } else if (x) {\n                    if (subkey.validated) {\n                        let r = true;\n                        subkey.validated.map(v => {\n                            const z = v(x, as);\n                            if (typeof z === 'boolean') {\n                                if(z  == false) {\n                                    r = false;\n                                }\n                            } else {\n                                x = z;\n                            }\n                        });\n                        if (r && x) {\n                            result = x;\n                        } else {\n                            x = undefined;\n                        }\n                    } else {\n                        result = x;\n                    }\n                }\n            } else if (node && (typeof node === 'string') && subkey.key.length) {\n                result = [];\n                node.split('.').map(\n                    (item) => {\n                        if (item.indexOf(subkey.key) >= 0) {\n                            result.push(item);\n                        }\n                    }\n                )\n            } else {\n                result = node;\n            }\n        });\n        return result;\n    }\n\n    private _get(path: string) {\n        const url = this.SERVICE_PATH + path;\n        const dot = path.lastIndexOf('.');\n        const ext = dot < 0 ? undefined : path.toLowerCase().substr(dot);\n        const headers = new HttpHeaders();\n        let result: any;\n\n        headers.set('Access-Control-Allow-Origin', '*');\n\n        if (ext === '.xml') {\n            headers.set('Content-Type', 'text; charset=utf-8').set('Accept', 'text');\n            result = this.http.get(url, { headers, responseType: 'text' })\n                .pipe(map((res) => {\n                    const xml = new xmldom.DOMParser().parseFromString(res);\n                    const json = this._xml2json(xml.documentElement);\n                    return json;\n                })\n            );\n        } else if (ext === '.txt') {\n            headers.set('Content-Type', 'text; charset=utf-8').set('Accept', 'text');\n            result = this.http.get(url, { headers, responseType: 'text' }).pipe(map((res) => res));\n        } else if (ext === '.json'){\n            headers.set('Content-Type', 'json; charset=utf-8').set('Accept', 'json');\n            result = this.http.get(url, {headers}).pipe(map((res) => res));\n        } else {\n            headers.set('Content-Type', 'text; charset=utf-8').set('Accept', 'text');\n            result = this.http.get(url, { headers, responseType: 'text' })\n                .pipe(map((res) => {\n                    let parsed: any;\n                    try {\n                        parsed = JSON.parse(res);\n                    }catch (e) {\n                        try {\n                            const xml = new xmldom.DOMParser().parseFromString(res);\n                            parsed = this._xml2json(xml.documentElement);\n                        } catch (e2) {\n                            parsed = res;\n                        }\n                    };\n                    return parsed ? parsed : res;\n                })\n            );\n        }\n        return result;\n    }\n\n    private _stringValueOfKey(key: any) {\n        let result: any = [];\n\n        if (key instanceof Array) {\n            key.map( \n                (item: any) => {\n                    if (item instanceof Array) {\n                        let x = [];\n                        item.map(\n                            (subitem) => {\n                                if (subitem.key.length) {\n                                    x.push(subitem.key);\n                                }\n                            }\n                        )\n                        result.push(x.join('.'));\n                    } else if (typeof item === 'string') {\n                        const i = item.indexOf('[');\n                        const j = item.indexOf(']');\n                        const k = item.length > (j + 1) ? 2 : 1;\n                        result.push(i > 0 ? item.substring(0,i) : j > 0 ? item.substring(j + k) : item);\n                    } else if (item.key.length) {\n                        result.push(item.key);\n                    }\n                }\n            );\n            result = result.join(',');\n            result = result.indexOf('.') < 0 ? result.replace(/\\,/g, '.') : result;\n        } else {\n            result = key.key;\n        }\n        return result;\n    }\n\n    private _addToResult(value: any, key: string, operation: any, action: any) {\n        const path = this._stringValueOfKey(action.path);\n        const key2 = this._stringValueOfKey(key);\n        let op = operation.result[path];\n        let complete = false;\n    \n        if (!op) {\n            operation.result[path] = {};\n        }\n        if (op) {\n            let opk = op[key2];\n            if (operation['temp'] &&\n                operation['temp'][key2]) {\n                op[key2] = [op[key2]];\n                delete operation['temp'];\n            }else if (opk && (opk instanceof Array) === false) {\n                operation.result[path][key2] = [opk]\n                op = operation.result[path];\n            }\n            value = this._normalize(value, action.deepXml);\n            if (op[key2]) {\n                if (typeof value === 'object') {\n                    if (JSON.stringify(value) !== JSON.stringify(op[key2][0])) {\n                        op[key2].push( value[key2] ? value[key2] : value );\n                    }\n                } else {\n                    op[key2].push( value[key2] ? value[key2] : value );\n                }\n            } else {\n                if ((op instanceof Array) === false) {\n                    operation.result[path] = [op];\n                    operation.result[path].push( value[key2] ? value[key2] : value );\n                } else {\n                    if (typeof value === 'object') {\n                        if (JSON.stringify(value) !== JSON.stringify(op[0])) {\n                            op.push( value[key2] ? value[key2] : value );\n                        }\n                    } else {\n                        op.push( value[key2] ? value[key2] : value );\n                    }\n                }\n            }\n        } else {\n            if (value instanceof Array) {\n                // if already an array remember it.\n                if (!operation['temp']) {\n                    operation['temp'] = {};\n                }\n                if (!operation['temp'][key2]) {\n                    operation['temp'][key2] = true;\n                }\n            }\n            operation.result[path][key2] = this._normalize(value, action.deepXml);\n            complete = true;\n        }\n        return complete;\n    }\n\n    private _pack(result: any) {\n        if (result instanceof Array) {\n            const list = [];\n            result.map(\n                (item) => {\n                    list.push(this._pack(item));\n                }\n            );\n            result = list;\n        } else if (typeof result === 'object') {\n            const keys = Object.keys(result);\n            keys.map (\n                (key) => {\n                    const item = result[key];\n                    if (item instanceof Array) {\n\n                    } else if (item[key]) {\n                        result[key] = item[key];\n                    }\n                }\n            )\n        }\n        return result;\n    }\n\n    private _triggerResult(promise: any, as: any, result: any) {\n        const x = this._pack(result);\n        let saveAs: any;\n        if (as) {\n            if (typeof as === 'string') {\n                saveAs = {};\n                saveAs[as] = x;\n            } else if (typeof as === 'object') {\n                saveAs = as;\n            }\n        }\n        promise.next(x);\n        return saveAs;\n    }\n\n    private _subquery(\n        promise: any,\n        path: any,\n        operation: any,\n        action: any) {\n\n        if (operation.cachedFiles[path] === undefined) {\n            // one of the keys at this level could be referencing the same file which\n            // is not yet fetched. need to wait till it is available.\n            operation.cachedFiles[path] = new BehaviorSubject<any>(null);\n            this._queryIteration(\n                operation.cachedFiles[path],\n                operation,\n                {\n                    path: action.path,\n                    in: action.in,\n                    deepXml: action.deepXml,\n                    join: action.join,\n                    handler: action.handler,\n                    queryItems: (action.path instanceof Array) ? action.path.length : 1\n                },\n                path\n            );\n        }\n\n        // wait for result raised above.\n        operation.cachedFiles[path].subscribe(\n            (source: any) => {\n                if (source) {\n                    const opkeyi = action.join ? action.join[action.path] : undefined;\n                    if (opkeyi) {\n                        if (source instanceof Array) {\n                            source.map(\n                                (item) => {\n                                    this._subquery(\n                                        promise,\n                                        item,\n                                        operation,\n                                        {\n                                            path: opkeyi.path,\n                                            in: opkeyi.in == undefined ? action.in : (opkeyi.in + item),\n                                            deepXml: opkeyi.deepXml,\n                                            join: opkeyi.join,\n                                            handler: opkeyi.handler,\n                                            queryItems: (opkeyi.path instanceof Array) ? opkeyi.path.length : 1\n                                        }\n                                    );\n                                }\n                            )\n                        } else {\n                            this._subquery(\n                                promise,\n                                source,\n                                operation,\n                                {\n                                    path: action.join[opkeyi.path],\n                                    in: opkeyi.in == undefined ? action.in : (opkeyi.in + source),\n                                    deepXml: action.deepXml,\n                                    join: opkeyi.join,\n                                    handler: opkeyi.handler,\n                                    queryItems: (opkeyi.path instanceof Array) ? opkeyi.path.length : 1\n                                }\n                            );\n                        }\n                    } else if (this._addToResult(source, action.path, operation, action)) {\n                        action.queryItems--;\n                        if (action.queryItems === 0) {\n                            operation.as = this._triggerResult(promise, operation.as, operation.result);\n                        }\n                    }else {\n                        action.queryItems--;\n                        operation.as = this._triggerResult(promise, operation.as, operation.result);\n                    }\n                }\n            },\n            (error: any) => {\n                if (this.logEnabled) {\n                    console.log(error);\n                }\n                action.queryItems--;\n                operation.as = this._triggerResult(promise, operation.as, operation.result);\n           }\n        );\n    }\n    /*\n    * Iterates through a chain query.\n    * @param promise The promise which original caller is waiting for.\n    * @param operation data for keeping track of the iteration.\n    * @param action contains: {path: current keys to query for, in: current query path, handler: resolver method}.\n    * @param cacheNamed The cached name from previous iteration if any.\n    * @returns returns none.\n    */\n    private _queryIteration(\n        promise: BehaviorSubject<any>,\n        operation: any,\n        action: any,\n        cacheNamed?: string) {\n\n        if (!action.handler) {\n            action.handler = (node: any, path: string, value: any) => value;\n        }\n        this._select(action.path, action.in, action.deepXml, operation.as, action.handler).subscribe(\n            (data) => {\n                if (data) {\n                    if (cacheNamed) {\n                        // result of n-th level call to be placed on previous level cache reference.\n                        operation.cachedFiles[cacheNamed].next(data);\n                    } else {\n                        if (data instanceof Array) {\n                            const operationalKey = action.join ? action.join[action.path] : undefined;\n                            if (operationalKey) {\n                                // assumption is the resulting list is a list of file paths.\n                                data.map( (content) => {\n                                    const path = content['#text'] ? content['#text'] : content;\n                                    let size = (operationalKey.path instanceof Array) ? operationalKey.path.length : 1;\n\n                                    if (operationalKey.in == undefined) {\n                                        operation.cachedFiles[path] = this._select(\n                                            operationalKey.path,\n                                            action.in,\n                                            operationalKey.deepXml,\n                                            operation.as,\n                                            operationalKey.handler\n                                        );\n                                        size --;\n                                    }\n                                    this._subquery(promise, path, operation, {\n                                        path: operationalKey.path,\n                                        in: operationalKey.in == undefined ? action.in : (operationalKey.in + content),\n                                        deepXml: operationalKey.deepXml,\n                                        join: operationalKey.join,\n                                        handler: operationalKey.handler,\n                                        queryItems: size\n                                    });\n                                });\n                            } else {\n                                // no more query in the chain.\n                                action.queryItems--;\n                                if (action.queryItems === 0) {\n                                    const result =operation.result ? operation.result : {};\n                                    operation.as = this._triggerResult(promise, operation.as, Object.keys(operation.result).length ? operation.result : data);\n                                }\n                            }\n                        } else if (typeof data === 'object') {\n                            Object.keys(data).map( (key) => {\n                                const content = data[key];\n                                const operationalKey = action.join ? action.join[key]: undefined;\n    \n                                if (content && content.length && operationalKey) {\n                                    let size = (operationalKey.path instanceof Array) ? operationalKey.path.length : 1;\n                                    if (operationalKey.in == undefined) {\n                                        operation.cachedFiles[content] = this._select(\n                                            operationalKey.path,\n                                            action.in,\n                                            operationalKey.deepXml,\n                                            operation.as,\n                                            operationalKey.handler\n                                        );\n                                        size --;\n                                    }\n                                    this._subquery(\n                                        promise,\n                                        content,\n                                        operation,\n                                        {\n                                            path: operationalKey.path,\n                                            in: operationalKey.in == undefined ? action.in : (operationalKey.in + content),\n                                            deepXml: operationalKey.deepXml,\n                                            handler: operationalKey.handler,\n                                            queryItems: size\n                                        }\n                                    );\n                                } else {\n                                    action.queryItems--;\n                                    if (content) {\n                                        if (!operation.result) {\n                                            operation.result = {};\n                                        }\n                                        if (operation.result instanceof Array) {\n                                            operation.result.push(content);\n                                        } else {\n                                            operation.result[key] = content;\n                                        }\n                                    }\n                                    if (action.queryItems === 0) {\n                                        operation.as = this._triggerResult(promise, operation.as, Object.keys(operation.result).length ? operation.result : data);\n                                    }\n                                }\n                            });\n                        } else {\n                            action.queryItems--;\n                            if (action.queryItems === 0) {\n                                if (Object.keys(operation.result).length === 0 && data !== undefined) {\n                                    operation.result = data;\n                                }\n                            }\n                            operation.as = this._triggerResult(promise, operation.as, operation.result);\n                        }\n                    }\n                }\n            },\n            (error: any) => {\n                promise.error({\n                    message: 'failed to query ' + action.path,\n                    reason: error.message ? error.message : error\n                });\n                action.queryItems--;\n                if (action.queryItems === 0) {\n                    operation.as = this._triggerResult(promise, operation.as, operation.result);\n                }\n            }\n        );\n    }\n\n    private _makeArguments(key: string) {\n        const list = key.split('.');\n        const result = [];\n        list.map( (item) => {\n            const b = item.indexOf('[');\n            if (b < 0) {\n                result.push({\n                    key: item,\n                    validated: [(data: any, as: any) => true]\n                });\n            } else {\n                let str = item.substring(b + 1, item.length - 1);\n                const vList = str.split('][');\n                const object = {\n                    key: item.substring(0,b),\n                    validated: [(data: any, as: any) => true]\n                };\n                vList.map( \n                    (filter) => {\n                        filter = filter.replace(/\\`/g, '.');\n                        filter = filter.replace(/\\@/g, 'data');\n                        if (filter.indexOf('order-by:') > -1) {\n                            const arg: any = filter.substring(filter.indexOf('order-by:') + 10).trim();\n                            const arglist = arg.split('~');\n                            const key = arglist[0].trim();\n                            const order= arglist[1] ? arglist[1].trim().toLowerCase(): 'asc';\n                            object['sort'] = function (array: any) {\n                                const _valueOf = (key: string, p: any) => {\n                                    key.split('.').map( (x) => {p = p[x]});\n                                    return p;\n                                }\n                                return array.sort(\n                                    function(a: any,b: any){\n                                        const flag =_valueOf(key, a) > _valueOf(key, b);\n                                        return flag ? (order === 'asc' ? 1: -1) : (order === 'asc' ? -1: 1);\n                                    }\n                                );\n                            }\n                        }else {\n                            const t = filter.indexOf('&&') > 0 || filter.indexOf('||') > 0;\n                            let f = 'return function (data, asList) { \\n';\n                            f += this._globalFunctions();\n                            f += 'var x = false;\\n try{\\n x = ';\n                            f += (t ? '(' + filter + ')' : filter) + '; \\n}catch(e){}\\n return x;\\n}';\n                            object['validated'].push( new Function(f)() );\n                        }\n                    }\n                );\n                result.push(object);\n            }\n        });\n        return result;\n    }\n\n    private _handleSpecialCharacters(path: string) {\n        let result = [];\n        path.split(']').map(\n            (item) => {\n                const bindex = item.indexOf('[');\n                if (bindex >= 0) {\n                    let x = '';\n                    if ( bindex > 0) {\n                        x += item.substring(0, bindex);\n                    }\n                    x += item.substring(bindex).replace(/\\./g,'`');\n                    result.push(x);\n                } else {\n                    result.push(item);\n                }\n            }\n        );\n        return result.join(']');\n    }\n    private _prepareJsonPath(path: any) {\n        let result: any;\n        if (path instanceof Array) {\n            result = [];\n            path.map(\n                (i) => {\n                    const x = this._handleSpecialCharacters(i);\n                    result.push(this._makeArguments(x));\n                }\n            );\n        } else {\n            const x = this._handleSpecialCharacters(path);\n            result = this._makeArguments(x);\n        }\n        return result;\n    }\n    \n    private _select(\n        path: any,\n        from: string,\n        deepXml: boolean,\n        as: any,\n        clause?: clauseEvaluator): BehaviorSubject<any> {\n\n        const dataStore = new BehaviorSubject<any>(null);\n\n        this._get(from).subscribe(\n            (data: any) => {\n                let result: any;\n                const jpath = this._prepareJsonPath(path);\n\n                if (!clause) {\n                    clause = (node: any, path: string, value: any) => value;\n                }\n                if (path instanceof Array) {\n                    result = {};\n                    jpath.map((pathItem) => {\n                        const y = this._valueOfJsonPath(pathItem, data, as, deepXml, clause);\n                        if (y) {\n                            let key = this._stringValueOfKey(pathItem);\n                            result[key] = y;\n                        }\n                    });\n                    if (Object.keys(result).length === 0) {\n                        result = undefined;\n                    }\n                } else if (typeof path === 'string') {\n                    result = this._valueOfJsonPath(jpath, data, as, deepXml, clause);\n                }\n                if (result) {\n                    dataStore.next(result);\n\n                } else {\n                    dataStore.error('Result not found for ' + path);\n                }\n            },\n            (error: any) => {\n                dataStore.error(error);\n            }\n        );\n        return dataStore;\n    }\n\n    /*\n    * Will convert the xml into a json.\n    * @param xml XML to be converted.\n    * @returns returns converted JSON.\n    */\n    private _xml2json(xml: any) {\n        try {\n            let obj = {};\n            if (xml.attributes) {\n                const c = xml.attributes;\n                for (let i = 0; i < c.length; i++) {\n                const attr = c[i];\n                obj[attr.name] = attr.value;\n                }\n            }\n            if (xml.childNodes && xml.childNodes.length) {\n                for (let i = 0; i < xml.childNodes.length; i++) {\n                    const item = xml.childNodes[i];\n                    const nodeName = item.nodeName;\n\n                    if (obj[nodeName] === undefined) {\n                        const fragment = this._xml2json(item);\n                        if (fragment) {\n                        obj[nodeName] = fragment;\n                        }\n                    } else {\n                        if (obj[nodeName].push === undefined) {\n                            const old = obj[nodeName];\n\n                            obj[nodeName] = [];\n                            obj[nodeName].push(old);\n                        }\n                        const fragment = this._xml2json(item);\n                        if (fragment) {\n                            obj[nodeName].push(fragment);\n                        }\n                    }\n                }\n            } else {\n                const text = xml.textContent.trim().replace(/(?:\\r\\n|\\r|\\n|\\t)/g, '');\n                obj = text.length ? text : undefined;\n            }\n            return obj;\n        } catch (e) {\n            if (this.logEnabled) {\n                console.log(e.message);\n            }\n        }\n    }\n\n    /*\n    * Will do a chain query on specified paths from remote location.\n    * @param chainQuery A Json structure with paths. Each path will contain a chain of instructions.\n    * Each instruction will have a 'in' to a file and a path to search on it (see. select()). once the\n    * result is in, the next instruction in the path chain will be trigged. After the path through all\n    * chained paths is completed, resulting value will be put in a json where its path is the original\n    * json path and its value will be the resulting value.\n    *\n    * this is not fully tested. caller should pass something like\n    * {path: [path1,path2], in: 'something or blank', deepXml: true, join: {k1: {path: path3, in: 'something or plank', clause: function}}}\n    * if path1 or path2 or path3 are found at the root object, a chain reaction to fetch deep will follow. An\n    * optional clause will help resolve complex situations.\n    *\n    * @returns returns an observable. the caller should subscribe to this in order to receive the result.\n    */\n    chainSelect(chainQuery: any): BehaviorSubject<any> {\n        const size = (chainQuery.path instanceof Array) ?  chainQuery.path.length : 1;\n        const operation = {cachedFiles: {}, as: {}, result: {}};\n        const dataStore = new BehaviorSubject<any>(null);\n\n        operation.cachedFiles[chainQuery.path] = dataStore;\n        this._queryIteration(\n            dataStore,\n            operation,\n            {\n                path: chainQuery.path,\n                in: chainQuery.in,\n                deepXml: chainQuery.deepXml,\n                join: chainQuery.join,\n                handler: chainQuery.handler,\n                queryItems: size\n            }\n        );\n        return dataStore;\n    }\n\n    /*\n    * Will group file paths if they are similar to avoid multiple calls.\n    * @param list A list of Json {paths, in, deepXml} structures. deepXml is optional.\n    * @param clause A method by which value(s) for the path(s) could be evaluated. the caller would evaluate the value for a given attribute.\n    * @returns returns an observable. the caller should subscribe to this in order to receive the result.\n    */\n    arraySelect(\n        list: any,\n        clause?: clauseEvaluator): BehaviorSubject<any>  {\n        const groupedList = {};\n        list.map( (item: any) => {\n            if (groupedList[item.in] === undefined) {\n                groupedList[item.in] = [];\n            }\n            groupedList[item.in].push({path: item.path, deepXml: item.deepXml});\n        });\n        const dataStore = new BehaviorSubject<any>(null);\n\n        Object.keys(groupedList).map ( (url) => {\n            this._select(groupedList[url].path, url, groupedList[url].deepXml, undefined, clause).subscribe(\n                (data: any) => {\n                    if (data) {\n                        dataStore.next(data);\n                    }\n                },\n                (error: any) => {\n                    dataStore.error(error);\n                }\n            );\n        });\n        return dataStore;\n    }\n\n    /*\n    * Will query path from a remote location qualified through an optional clause function that\n    * evaluates, filters, or sorts the resul of the query.\n    * @param path A a single JSON path or list of paths to select (i.e., 'a.b.c')\n    * @param from A reference URL to a remote source.\n    * @param deepXml if cdata-section should be parsed.\n    * @param clause A method by which value(s) for the path(s) could be evaluated. the caller would evaluate the value for a given attribute.\n    * @returns returns an observable. the caller should subscribe to this in order to receive the result.\n    */\n    select(\n        path: any,\n        from: string,\n        deepXml: boolean,\n        clause?: clauseEvaluator): BehaviorSubject<any> {\n\n        return this._select(path, from, deepXml, undefined, clause);\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { WizardQueryService } from './wizard-query.service';\n\n@Component({\n  selector: 'wizard-query',\n  templateUrl: './wizard-query.html',\n  styleUrls: ['./wizard-query.scss']\n})\nexport class WizardQueryComponent {\n  selectedDocumentName: string;\n\n  data: any;\n  source: any;\n  query: any;\n  \n  @Input()\n  set queryInfo(data: any) {\n    this.query = data;\n    if (this.query) {\n      this.selectedDocumentName = this.query.in.substring(this.query.in.lastIndexOf('/'));\n      this.queryService.chainSelect({\n        in: this.query.in,\n        path: ''\n      }).subscribe(\n        (success) => {\n          if(success) {\n            this.source = success;\n            this.data = undefined;\n          }\n        },\n        (error) => {\n          this.source = error;\n          this.data = undefined;\n        }\n      );\n    } else {\n      this.data = undefined;\n      this.source = undefined;\n    }\n  }\n\n  constructor(private queryService: WizardQueryService) {\n  }\n\n  private parseFunctions(content: any) {\n    if (content instanceof Array) {\n      content.map(\n        (item) => {\n          this.parseFunctions(item);\n        }\n      )\n    } else if (typeof content === 'object') {\n      Object.keys(content).map(\n        (key) => {\n          if (key === 'handler') {\n            content[key] = new Function('return function' + content[key])();\n          } else {\n            this.parseFunctions(content[key]);\n          }\n        }\n      );\n    }\n  }\n\n  executeQuery(text: any) {\n    try {\n      const content = JSON.parse(text.value);\n      this.parseFunctions(content)\n      if (content instanceof Array) {\n        this.queryService.arraySelect(content).subscribe(\n          (success) => {\n            if(success) {\n              this.data = success;\n            }\n          },\n          (error) => {\n            this.data = {alert: error};\n          }\n        );\n      } else {\n        this.queryService.chainSelect(content).subscribe(\n          (success) => {\n            if(success) {\n              this.data = success;\n            }\n          },\n          (error) => {\n            this.data = {alert: error};\n          }\n        );\n      }\n    }catch (err) {\n      this.data = {alert: err.message};\n    }\n  }\n}\n","import {\r\n    Directive,\r\n    Input,\r\n    Output,\r\n    EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { WizardQueryService } from './wizard-query.service';\r\n\r\n@Directive({\r\n    selector: '[wizardQuery]'\r\n})\r\nexport class WizardQueryDirective {\r\n    query: any;\r\n\r\n            \r\n    @Output()\r\n    onQueryResult: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output()\r\n    onQueryError: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input()\r\n    set wizardQuery(info: any) {\r\n        this.query = info;\r\n        if (this.query) {\r\n            if (this.query instanceof Array) {\r\n                this.queryService.arraySelect(this.query).subscribe(\r\n                    (success) => {\r\n                        if(success) {\r\n                            this.onQueryResult.emit(success);\r\n                        }\r\n                    },\r\n                    (error) => {\r\n                        this.onQueryResult.emit({alert: error});\r\n                    }\r\n                );\r\n            } else {\r\n                this.queryService.chainSelect(this.query).subscribe(\r\n                    (success) => {\r\n                        if(success) {\r\n                            this.onQueryResult.emit(success);\r\n                        }\r\n                    },\r\n                    (error) => {\r\n                        this.onQueryResult.emit({alert: error});\r\n                    }\r\n                );\r\n            }\r\n        } else {\r\n            this.onQueryResult.emit(undefined);\r\n        }\r\n    }\r\n\r\n    constructor(private queryService: WizardQueryService) {}\r\n\r\n}","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { WizardQueryComponent } from './wizard-query.component';\nimport { WizardQueryService } from './wizard-query.service';\nimport { WizardQueryDirective } from './wizard-query.directive';\n\n\n@NgModule({\n  declarations: [\n    WizardQueryComponent,\n    WizardQueryDirective\n  ],\n  exports: [\n    WizardQueryComponent,\n    WizardQueryDirective\n  ],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [\n    WizardQueryService\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class WizardQueryModule {}\n"]}